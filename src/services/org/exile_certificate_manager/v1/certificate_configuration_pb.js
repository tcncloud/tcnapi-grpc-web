// source: services/org/exile_certificate_manager/v1/certificate_configuration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var localGlobalThis = require("../../../../global.js");
var proto = localGlobalThis.proto;
var goog = jspb;
var global = localGlobalThis || 
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var services_org_exile_certificate_manager_v1_entities_pb = require('../../../../services/org/exile_certificate_manager/v1/entities_pb.js');
goog.object.extend(proto, services_org_exile_certificate_manager_v1_entities_pb);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.displayName = 'proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.repeatedFields_, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.displayName = 'proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
description: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
parameters: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getParameters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CertificateConfigurationType type = 3;
 * @return {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.getType = function() {
  return /** @type {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} value
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string parameters = 4;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.getParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationRequest.prototype.setParameters = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
configurationInfoId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigurationInfoId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationInfoId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string configuration_info_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.prototype.getConfigurationInfoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1.CreateCertificateConfigurationResponse.prototype.setConfigurationInfoId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
configurationInfoId: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
type: jspb.Message.getFieldWithDefault(msg, 4, 0),
parameters: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigurationInfoId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationInfoId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getParameters();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string configuration_info_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.getConfigurationInfoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.setConfigurationInfoId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional CertificateConfigurationType type = 4;
 * @return {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.getType = function() {
  return /** @type {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1.CertificateConfigurationType} value
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string parameters = 5;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.getParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationRequest.prototype.setParameters = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.UpdateCertificateConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
configurationInfoId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigurationInfoId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationInfoId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string configuration_info_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.prototype.getConfigurationInfoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationRequest.prototype.setConfigurationInfoId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.DeleteCertificateConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest;
  return proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
certificateConfigurationsList: jspb.Message.toObjectList(msg.getCertificateConfigurationsList(),
    services_org_exile_certificate_manager_v1_entities_pb.CertificateConfiguration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse;
  return proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_org_exile_certificate_manager_v1_entities_pb.CertificateConfiguration;
      reader.readMessage(value,services_org_exile_certificate_manager_v1_entities_pb.CertificateConfiguration.deserializeBinaryFromReader);
      msg.addCertificateConfigurations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateConfigurationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      services_org_exile_certificate_manager_v1_entities_pb.CertificateConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CertificateConfiguration certificate_configurations = 1;
 * @return {!Array<!proto.services.org.exile_certificate_manager.v1.CertificateConfiguration>}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.getCertificateConfigurationsList = function() {
  return /** @type{!Array<!proto.services.org.exile_certificate_manager.v1.CertificateConfiguration>} */ (
    jspb.Message.getRepeatedWrapperField(this, services_org_exile_certificate_manager_v1_entities_pb.CertificateConfiguration, 1));
};


/**
 * @param {!Array<!proto.services.org.exile_certificate_manager.v1.CertificateConfiguration>} value
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse} returns this
*/
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.setCertificateConfigurationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1.CertificateConfiguration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.org.exile_certificate_manager.v1.CertificateConfiguration}
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.addCertificateConfigurations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.org.exile_certificate_manager.v1.CertificateConfiguration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1.ListCertificateConfigurationsResponse.prototype.clearCertificateConfigurationsList = function() {
  return this.setCertificateConfigurationsList([]);
};


goog.object.extend(exports, proto.services.org.exile_certificate_manager.v1);
