// source: services/org/exile_certificate_manager/v1alpha1/exile_configuration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var services_org_exile_certificate_manager_v1alpha1_entities_pb = require('../../../../services/org/exile_certificate_manager/v1alpha1/entities_pb.js');
goog.object.extend(proto, services_org_exile_certificate_manager_v1alpha1_entities_pb);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest', null, proto);
goog.exportSymbol('services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.repeatedFields_, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
description: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
parameters: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getParameters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ExileConfigurationType type = 3;
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.getType = function() {
  return /** @type {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfigurationType} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string parameters = 4;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.getParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationRequest.prototype.setParameters = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
exileConfigurationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
exileConfiguration: (f = msg.getExileConfiguration()) && services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileConfigurationId(value);
      break;
    case 2:
      var value = new services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration;
      reader.readMessage(value,services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.deserializeBinaryFromReader);
      msg.setExileConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileConfigurationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExileConfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string exile_configuration_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.getExileConfigurationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.setExileConfigurationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExileConfiguration exile_configuration = 2;
 * @return {?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.getExileConfiguration = function() {
  return /** @type{?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration} */ (
    jspb.Message.getWrapperField(this, services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration, 2));
};


/**
 * @param {?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration|undefined} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.setExileConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.clearExileConfiguration = function() {
  return this.setExileConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileConfigurationResponse.prototype.hasExileConfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
configuration: (f = msg.getConfiguration()) && services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.toObject(includeInstance, f),
fieldMask: (f = msg.getFieldMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration;
      reader.readMessage(value,services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setFieldMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getFieldMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExileConfiguration configuration = 1;
 * @return {?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.getConfiguration = function() {
  return /** @type{?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration} */ (
    jspb.Message.getWrapperField(this, services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration, 1));
};


/**
 * @param {?proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration|undefined} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.FieldMask field_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.getFieldMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.setFieldMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.clearFieldMask = function() {
  return this.setFieldMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationRequest.prototype.hasFieldMask = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UpdateExileConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
exileConfigurationId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileConfigurationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileConfigurationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string exile_configuration_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.prototype.getExileConfigurationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationRequest.prototype.setExileConfigurationId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.DeleteExileConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fieldMask: (f = msg.getFieldMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setFieldMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldMask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.FieldMask field_mask = 1;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.getFieldMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 1));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.setFieldMask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.clearFieldMask = function() {
  return this.setFieldMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsRequest.prototype.hasFieldMask = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
exileConfigurationsList: jspb.Message.toObjectList(msg.getExileConfigurationsList(),
    services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration;
      reader.readMessage(value,services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.deserializeBinaryFromReader);
      msg.addExileConfigurations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileConfigurationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExileConfiguration exile_configurations = 1;
 * @return {!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration>}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.getExileConfigurationsList = function() {
  return /** @type{!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration>} */ (
    jspb.Message.getRepeatedWrapperField(this, services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileConfiguration, 1));
};


/**
 * @param {!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration>} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.setExileConfigurationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.addExileConfigurations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.org.exile_certificate_manager.v1alpha1.ExileConfiguration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileConfigurationsResponse.prototype.clearExileConfigurationsList = function() {
  return this.setExileConfigurationsList([]);
};


goog.object.extend(exports, proto);
