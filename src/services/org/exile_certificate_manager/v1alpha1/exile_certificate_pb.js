// source: services/org/exile_certificate_manager/v1alpha1/exile_certificate.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var localGlobalThis = require("../../../../global.js");
var proto = localGlobalThis.proto;
var goog = jspb;
var global = localGlobalThis || 
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var services_org_exile_certificate_manager_v1alpha1_entities_pb = require('../../../../services/org/exile_certificate_manager/v1alpha1/entities_pb.js');
goog.object.extend(proto, services_org_exile_certificate_manager_v1alpha1_entities_pb);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest', null, global);
goog.exportSymbol('proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.repeatedFields_, null);
};
goog.inherits(proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.displayName = 'proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
description: jspb.Message.getFieldWithDefault(msg, 2, ""),
configurationId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigurationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigurationId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string configuration_id = 3;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.getConfigurationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateRequest.prototype.setConfigurationId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
encodedExileCertificate: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncodedExileCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedExileCertificate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string encoded_exile_certificate = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.prototype.getEncodedExileCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.CreateExileCertificateResponse.prototype.setEncodedExileCertificate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
exileCertificateId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileCertificateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileCertificateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string exile_certificate_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.prototype.getExileCertificateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateRequest.prototype.setExileCertificateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.RevokeExileCertificateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
exileCertificateId: jspb.Message.getFieldWithDefault(msg, 1, ""),
exileConfigurationId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileCertificateId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileConfigurationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileCertificateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExileConfigurationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string exile_certificate_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.getExileCertificateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.setExileCertificateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string exile_configuration_id = 2;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.getExileConfigurationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationRequest.prototype.setExileConfigurationId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.AssignExileConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
exileCertificateId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExileCertificateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileCertificateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string exile_certificate_id = 1;
 * @return {string}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.prototype.getExileCertificateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationRequest.prototype.setExileCertificateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.UnassignExileConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fieldMask: (f = msg.getFieldMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest;
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setFieldMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldMask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.FieldMask field_mask = 1;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.getFieldMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 1));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.setFieldMask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.clearFieldMask = function() {
  return this.setFieldMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesRequest.prototype.hasFieldMask = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
exileCertificatesList: jspb.Message.toObjectList(msg.getExileCertificatesList(),
    services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileCertificate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse;
  return proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileCertificate;
      reader.readMessage(value,services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileCertificate.deserializeBinaryFromReader);
      msg.addExileCertificates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExileCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileCertificate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExileCertificate exile_certificates = 1;
 * @return {!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate>}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.getExileCertificatesList = function() {
  return /** @type{!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, services_org_exile_certificate_manager_v1alpha1_entities_pb.ExileCertificate, 1));
};


/**
 * @param {!Array<!proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate>} value
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse} returns this
*/
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.setExileCertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate}
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.addExileCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.org.exile_certificate_manager.v1alpha1.ExileCertificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse} returns this
 */
proto.services.org.exile_certificate_manager.v1alpha1.ListExileCertificatesResponse.prototype.clearExileCertificatesList = function() {
  return this.setExileCertificatesList([]);
};


goog.object.extend(exports, proto.services.org.exile_certificate_manager.v1alpha1);
