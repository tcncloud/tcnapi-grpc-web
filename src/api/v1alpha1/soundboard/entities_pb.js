// source: api/v1alpha1/soundboard/entities.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

var api_commons_org_pb = require('../../../api/commons/org_pb.js');
goog.object.extend(proto, api_commons_org_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('api.v1alpha1.soundboard.CreateSoundboardReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.CreateSoundboardRes', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.DeleteSoundboardReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.DeleteSoundboardRes', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.GetSoundboardFileReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.GetSoundboardFileRes', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.GetSoundboardReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.GetSoundboardRes', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.ListSoundboardsReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.ListSoundboardsRes', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.SoundboardDetails', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.UpdateSoundboardReq', null, proto);
goog.exportSymbol('api.v1alpha1.soundboard.UpdateSoundboardRes', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.SoundboardDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.SoundboardDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.SoundboardDetails.displayName = 'proto.api.v1alpha1.soundboard.SoundboardDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.GetSoundboardFileReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.GetSoundboardFileReq.displayName = 'proto.api.v1alpha1.soundboard.GetSoundboardFileReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.GetSoundboardFileRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.GetSoundboardFileRes.displayName = 'proto.api.v1alpha1.soundboard.GetSoundboardFileRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.GetSoundboardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.GetSoundboardReq.displayName = 'proto.api.v1alpha1.soundboard.GetSoundboardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.GetSoundboardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.GetSoundboardRes.displayName = 'proto.api.v1alpha1.soundboard.GetSoundboardRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.CreateSoundboardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.CreateSoundboardReq.displayName = 'proto.api.v1alpha1.soundboard.CreateSoundboardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.CreateSoundboardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.CreateSoundboardRes.displayName = 'proto.api.v1alpha1.soundboard.CreateSoundboardRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.ListSoundboardsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.ListSoundboardsReq.displayName = 'proto.api.v1alpha1.soundboard.ListSoundboardsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.v1alpha1.soundboard.ListSoundboardsRes.repeatedFields_, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.ListSoundboardsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.ListSoundboardsRes.displayName = 'proto.api.v1alpha1.soundboard.ListSoundboardsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.UpdateSoundboardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.UpdateSoundboardReq.displayName = 'proto.api.v1alpha1.soundboard.UpdateSoundboardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.UpdateSoundboardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.UpdateSoundboardRes.displayName = 'proto.api.v1alpha1.soundboard.UpdateSoundboardRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.DeleteSoundboardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.DeleteSoundboardReq.displayName = 'proto.api.v1alpha1.soundboard.DeleteSoundboardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.v1alpha1.soundboard.DeleteSoundboardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.v1alpha1.soundboard.DeleteSoundboardRes.displayName = 'proto.api.v1alpha1.soundboard.DeleteSoundboardRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.SoundboardDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.SoundboardDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
fileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
fileType: jspb.Message.getFieldWithDefault(msg, 3, 0),
title: jspb.Message.getFieldWithDefault(msg, 4, ""),
description: jspb.Message.getFieldWithDefault(msg, 5, ""),
dateCreated: (f = msg.getDateCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
lastModified: (f = msg.getLastModified()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
fileSize: jspb.Message.getFieldWithDefault(msg, 8, 0),
recordingLength: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.SoundboardDetails;
  return proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.SoundboardDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 3:
      var value = /** @type {!proto.api.commons.RecordingFileType} */ (reader.readEnum());
      msg.setFileType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDateCreated(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastModified(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileSize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordingLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.SoundboardDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDateCreated();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastModified();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getRecordingLength();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setFileName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional api.commons.RecordingFileType file_type = 3;
 * @return {!proto.api.commons.RecordingFileType}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getFileType = function() {
  return /** @type {!proto.api.commons.RecordingFileType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.commons.RecordingFileType} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setFileType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp date_created = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getDateCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
*/
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setDateCreated = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.clearDateCreated = function() {
  return this.setDateCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.hasDateCreated = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp last_modified = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getLastModified = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
*/
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setLastModified = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.clearLastModified = function() {
  return this.setLastModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.hasLastModified = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 file_size = 8;
 * @return {number}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setFileSize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 recording_length = 9;
 * @return {number}
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.getRecordingLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails} returns this
 */
proto.api.v1alpha1.soundboard.SoundboardDetails.prototype.setRecordingLength = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.GetSoundboardFileReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.GetSoundboardFileReq;
  return proto.api.v1alpha1.soundboard.GetSoundboardFileReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.GetSoundboardFileReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileReq} returns this
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileReq.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.GetSoundboardFileRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardFile: msg.getSoundboardFile_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.GetSoundboardFileRes;
  return proto.api.v1alpha1.soundboard.GetSoundboardFileRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSoundboardFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.GetSoundboardFileRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardFile_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes soundboard_file = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.getSoundboardFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes soundboard_file = 1;
 * This is a type-conversion wrapper around `getSoundboardFile()`
 * @return {string}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.getSoundboardFile_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSoundboardFile()));
};


/**
 * optional bytes soundboard_file = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSoundboardFile()`
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.getSoundboardFile_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSoundboardFile()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardFileRes} returns this
 */
proto.api.v1alpha1.soundboard.GetSoundboardFileRes.prototype.setSoundboardFile = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.GetSoundboardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardReq}
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.GetSoundboardReq;
  return proto.api.v1alpha1.soundboard.GetSoundboardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardReq}
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.GetSoundboardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardReq} returns this
 */
proto.api.v1alpha1.soundboard.GetSoundboardReq.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.GetSoundboardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboard: (f = msg.getSoundboard()) && proto.api.v1alpha1.soundboard.SoundboardDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardRes}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.GetSoundboardRes;
  return proto.api.v1alpha1.soundboard.GetSoundboardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardRes}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.v1alpha1.soundboard.SoundboardDetails;
      reader.readMessage(value,proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader);
      msg.setSoundboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.GetSoundboardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.GetSoundboardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional SoundboardDetails soundboard = 1;
 * @return {?proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.getSoundboard = function() {
  return /** @type{?proto.api.v1alpha1.soundboard.SoundboardDetails} */ (
    jspb.Message.getWrapperField(this, proto.api.v1alpha1.soundboard.SoundboardDetails, 1));
};


/**
 * @param {?proto.api.v1alpha1.soundboard.SoundboardDetails|undefined} value
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardRes} returns this
*/
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.setSoundboard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.v1alpha1.soundboard.GetSoundboardRes} returns this
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.clearSoundboard = function() {
  return this.setSoundboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.v1alpha1.soundboard.GetSoundboardRes.prototype.hasSoundboard = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.CreateSoundboardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboard: (f = msg.getSoundboard()) && proto.api.v1alpha1.soundboard.SoundboardDetails.toObject(includeInstance, f),
ftsId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardReq}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.CreateSoundboardReq;
  return proto.api.v1alpha1.soundboard.CreateSoundboardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardReq}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.v1alpha1.soundboard.SoundboardDetails;
      reader.readMessage(value,proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader);
      msg.setSoundboard(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFtsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.CreateSoundboardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter
    );
  }
  f = message.getFtsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional SoundboardDetails soundboard = 1;
 * @return {?proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.getSoundboard = function() {
  return /** @type{?proto.api.v1alpha1.soundboard.SoundboardDetails} */ (
    jspb.Message.getWrapperField(this, proto.api.v1alpha1.soundboard.SoundboardDetails, 1));
};


/**
 * @param {?proto.api.v1alpha1.soundboard.SoundboardDetails|undefined} value
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} returns this
*/
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.setSoundboard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} returns this
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.clearSoundboard = function() {
  return this.setSoundboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.hasSoundboard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fts_id = 2;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.getFtsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardReq} returns this
 */
proto.api.v1alpha1.soundboard.CreateSoundboardReq.prototype.setFtsId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.CreateSoundboardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
ftsId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardRes}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.CreateSoundboardRes;
  return proto.api.v1alpha1.soundboard.CreateSoundboardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardRes}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFtsId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.CreateSoundboardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.CreateSoundboardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getFtsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardRes} returns this
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string fts_id = 2;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.getFtsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.CreateSoundboardRes} returns this
 */
proto.api.v1alpha1.soundboard.CreateSoundboardRes.prototype.setFtsId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.ListSoundboardsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsReq}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.ListSoundboardsReq;
  return proto.api.v1alpha1.soundboard.ListSoundboardsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsReq}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.ListSoundboardsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.ListSoundboardsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.ListSoundboardsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardsList: jspb.Message.toObjectList(msg.getSoundboardsList(),
    proto.api.v1alpha1.soundboard.SoundboardDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsRes}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.ListSoundboardsRes;
  return proto.api.v1alpha1.soundboard.ListSoundboardsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsRes}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.v1alpha1.soundboard.SoundboardDetails;
      reader.readMessage(value,proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader);
      msg.addSoundboards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.ListSoundboardsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.ListSoundboardsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SoundboardDetails soundboards = 1;
 * @return {!Array<!proto.api.v1alpha1.soundboard.SoundboardDetails>}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.getSoundboardsList = function() {
  return /** @type{!Array<!proto.api.v1alpha1.soundboard.SoundboardDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.v1alpha1.soundboard.SoundboardDetails, 1));
};


/**
 * @param {!Array<!proto.api.v1alpha1.soundboard.SoundboardDetails>} value
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsRes} returns this
*/
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.setSoundboardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.v1alpha1.soundboard.SoundboardDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.addSoundboards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.v1alpha1.soundboard.SoundboardDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.v1alpha1.soundboard.ListSoundboardsRes} returns this
 */
proto.api.v1alpha1.soundboard.ListSoundboardsRes.prototype.clearSoundboardsList = function() {
  return this.setSoundboardsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.UpdateSoundboardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboard: (f = msg.getSoundboard()) && proto.api.v1alpha1.soundboard.SoundboardDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.UpdateSoundboardReq;
  return proto.api.v1alpha1.soundboard.UpdateSoundboardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.v1alpha1.soundboard.SoundboardDetails;
      reader.readMessage(value,proto.api.v1alpha1.soundboard.SoundboardDetails.deserializeBinaryFromReader);
      msg.setSoundboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.UpdateSoundboardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.v1alpha1.soundboard.SoundboardDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional SoundboardDetails soundboard = 1;
 * @return {?proto.api.v1alpha1.soundboard.SoundboardDetails}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.getSoundboard = function() {
  return /** @type{?proto.api.v1alpha1.soundboard.SoundboardDetails} */ (
    jspb.Message.getWrapperField(this, proto.api.v1alpha1.soundboard.SoundboardDetails, 1));
};


/**
 * @param {?proto.api.v1alpha1.soundboard.SoundboardDetails|undefined} value
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq} returns this
*/
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.setSoundboard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardReq} returns this
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.clearSoundboard = function() {
  return this.setSoundboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardReq.prototype.hasSoundboard = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.UpdateSoundboardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.UpdateSoundboardRes;
  return proto.api.v1alpha1.soundboard.UpdateSoundboardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.UpdateSoundboardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.UpdateSoundboardRes} returns this
 */
proto.api.v1alpha1.soundboard.UpdateSoundboardRes.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.DeleteSoundboardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
soundboardId: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.DeleteSoundboardReq;
  return proto.api.v1alpha1.soundboard.DeleteSoundboardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSoundboardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.DeleteSoundboardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundboardId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 soundboard_id = 1;
 * @return {string}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.prototype.getSoundboardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.v1alpha1.soundboard.DeleteSoundboardReq} returns this
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardReq.prototype.setSoundboardId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.v1alpha1.soundboard.DeleteSoundboardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.v1alpha1.soundboard.DeleteSoundboardRes}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.v1alpha1.soundboard.DeleteSoundboardRes;
  return proto.api.v1alpha1.soundboard.DeleteSoundboardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.v1alpha1.soundboard.DeleteSoundboardRes}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.v1alpha1.soundboard.DeleteSoundboardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.v1alpha1.soundboard.DeleteSoundboardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.v1alpha1.soundboard.DeleteSoundboardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto);
