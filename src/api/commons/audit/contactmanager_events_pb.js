// source: api/commons/audit/contactmanager_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var localGlobalThis = require("../../../global.js");
var proto = localGlobalThis.proto;
var goog = jspb;
var global = localGlobalThis || 
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var api_commons_classifier_pb = require('../../../api/commons/classifier_pb.js');
goog.object.extend(proto, api_commons_classifier_pb);
var api_commons_contactmanager_pb = require('../../../api/commons/contactmanager_pb.js');
goog.object.extend(proto, api_commons_contactmanager_pb);
goog.exportSymbol('proto.api.commons.audit.AuditedContactField', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactFieldChanges', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerDeleteEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntityAssociationEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryAddEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryEditEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryGetEncEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerKycEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerListUploadEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryAddEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryAddEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryAddEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryAddEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryGetEncEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryGetEncEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryGetEncEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryEditEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryEditEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryEditEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryEditEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerDeleteEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerDeleteEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerDeleteEvent.displayName = 'proto.api.commons.audit.ContactManagerDeleteEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.audit.ContactManagerEntryEvent.repeatedFields_, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactFieldChanges = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactFieldChanges, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactFieldChanges.displayName = 'proto.api.commons.audit.ContactFieldChanges';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.AuditedContactField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.AuditedContactField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.AuditedContactField.displayName = 'proto.api.commons.audit.AuditedContactField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerListUploadEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerListUploadEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerListUploadEvent.displayName = 'proto.api.commons.audit.ContactManagerListUploadEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerKycEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.audit.ContactManagerKycEvent.repeatedFields_, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerKycEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerKycEvent.displayName = 'proto.api.commons.audit.ContactManagerKycEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntityAssociationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntityAssociationEvent.displayName = 'proto.api.commons.audit.ContactManagerEntityAssociationEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryAddEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
addevent: (f = msg.getAddevent()) && proto.api.commons.audit.ContactManagerEntryEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryAddEvent;
  return proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.audit.ContactManagerEntryEvent;
      reader.readMessage(value,proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader);
      msg.setAddevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryAddEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContactManagerEntryEvent addEvent = 1;
 * @return {?proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.getAddevent = function() {
  return /** @type{?proto.api.commons.audit.ContactManagerEntryEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.ContactManagerEntryEvent, 1));
};


/**
 * @param {?proto.api.commons.audit.ContactManagerEntryEvent|undefined} value
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent} returns this
*/
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.setAddevent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.clearAddevent = function() {
  return this.setAddevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.hasAddevent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryGetEncEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
viewevent: (f = msg.getViewevent()) && proto.api.commons.audit.ContactManagerEntryEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryGetEncEvent;
  return proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.audit.ContactManagerEntryEvent;
      reader.readMessage(value,proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader);
      msg.setViewevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryGetEncEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContactManagerEntryEvent viewEvent = 1;
 * @return {?proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.getViewevent = function() {
  return /** @type{?proto.api.commons.audit.ContactManagerEntryEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.ContactManagerEntryEvent, 1));
};


/**
 * @param {?proto.api.commons.audit.ContactManagerEntryEvent|undefined} value
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} returns this
*/
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.setViewevent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.clearViewevent = function() {
  return this.setViewevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.hasViewevent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryEditEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryEditEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
editevent: (f = msg.getEditevent()) && proto.api.commons.audit.ContactManagerEntryEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryEditEvent}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryEditEvent;
  return proto.api.commons.audit.ContactManagerEntryEditEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryEditEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryEditEvent}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.audit.ContactManagerEntryEvent;
      reader.readMessage(value,proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader);
      msg.setEditevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryEditEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryEditEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEditevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContactManagerEntryEvent editEvent = 1;
 * @return {?proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.getEditevent = function() {
  return /** @type{?proto.api.commons.audit.ContactManagerEntryEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.ContactManagerEntryEvent, 1));
};


/**
 * @param {?proto.api.commons.audit.ContactManagerEntryEvent|undefined} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEditEvent} returns this
*/
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.setEditevent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerEntryEditEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.clearEditevent = function() {
  return this.setEditevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerEntryEditEvent.prototype.hasEditevent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerDeleteEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerDeleteEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
deleteevent: (f = msg.getDeleteevent()) && proto.api.commons.audit.ContactManagerEntryEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerDeleteEvent;
  return proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.audit.ContactManagerEntryEvent;
      reader.readMessage(value,proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader);
      msg.setDeleteevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerDeleteEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerDeleteEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleteevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContactManagerEntryEvent deleteEvent = 1;
 * @return {?proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.getDeleteevent = function() {
  return /** @type{?proto.api.commons.audit.ContactManagerEntryEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.ContactManagerEntryEvent, 1));
};


/**
 * @param {?proto.api.commons.audit.ContactManagerEntryEvent|undefined} value
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent} returns this
*/
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.setDeleteevent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent} returns this
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.clearDeleteevent = function() {
  return this.setDeleteevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.hasDeleteevent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.audit.ContactManagerEntryEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
contactmanagerlistid: jspb.Message.getFieldWithDefault(msg, 1, 0),
contactmanagerentryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
contactmanagerentrylistidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
fieldsChangesList: jspb.Message.toObjectList(msg.getFieldsChangesList(),
    proto.api.commons.audit.ContactFieldChanges.toObject, includeInstance),
contactUpdateTaskId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryEvent;
  return proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent}
 */
proto.api.commons.audit.ContactManagerEntryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerlistid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerentryid(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addContactmanagerentrylistids(values[i]);
      }
      break;
    case 4:
      var value = new proto.api.commons.audit.ContactFieldChanges;
      reader.readMessage(value,proto.api.commons.audit.ContactFieldChanges.deserializeBinaryFromReader);
      msg.addFieldsChanges(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setContactUpdateTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactmanagerlistid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getContactmanagerentryid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getContactmanagerentrylistidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getFieldsChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.commons.audit.ContactFieldChanges.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64String(
      5,
      f
    );
  }
};


/**
 * optional int64 ContactManagerListId = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.getContactmanagerlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.setContactmanagerlistid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ContactManagerEntryId = 2;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.getContactmanagerentryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.setContactmanagerentryid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int64 ContactManagerEntryListIds = 3;
 * @return {!Array<number>}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.getContactmanagerentrylistidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.setContactmanagerentrylistidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.addContactmanagerentrylistids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.clearContactmanagerentrylistidsList = function() {
  return this.setContactmanagerentrylistidsList([]);
};


/**
 * repeated ContactFieldChanges fields_changes = 4;
 * @return {!Array<!proto.api.commons.audit.ContactFieldChanges>}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.getFieldsChangesList = function() {
  return /** @type{!Array<!proto.api.commons.audit.ContactFieldChanges>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.audit.ContactFieldChanges, 4));
};


/**
 * @param {!Array<!proto.api.commons.audit.ContactFieldChanges>} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
*/
proto.api.commons.audit.ContactManagerEntryEvent.prototype.setFieldsChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.commons.audit.ContactFieldChanges=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.audit.ContactFieldChanges}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.addFieldsChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.commons.audit.ContactFieldChanges, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.clearFieldsChangesList = function() {
  return this.setFieldsChangesList([]);
};


/**
 * optional int64 contact_update_task_id = 5;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.getContactUpdateTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.setContactUpdateTaskId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerEntryEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.clearContactUpdateTaskId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerEntryEvent.prototype.hasContactUpdateTaskId = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactFieldChanges.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactFieldChanges} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactFieldChanges.toObject = function(includeInstance, msg) {
  var f, obj = {
fromValue: (f = msg.getFromValue()) && proto.api.commons.audit.AuditedContactField.toObject(includeInstance, f),
toValue: (f = msg.getToValue()) && proto.api.commons.audit.AuditedContactField.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactFieldChanges}
 */
proto.api.commons.audit.ContactFieldChanges.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactFieldChanges;
  return proto.api.commons.audit.ContactFieldChanges.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactFieldChanges} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactFieldChanges}
 */
proto.api.commons.audit.ContactFieldChanges.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.audit.AuditedContactField;
      reader.readMessage(value,proto.api.commons.audit.AuditedContactField.deserializeBinaryFromReader);
      msg.setFromValue(value);
      break;
    case 2:
      var value = new proto.api.commons.audit.AuditedContactField;
      reader.readMessage(value,proto.api.commons.audit.AuditedContactField.deserializeBinaryFromReader);
      msg.setToValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactFieldChanges.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactFieldChanges} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactFieldChanges.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.audit.AuditedContactField.serializeBinaryToWriter
    );
  }
  f = message.getToValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.commons.audit.AuditedContactField.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuditedContactField from_value = 1;
 * @return {?proto.api.commons.audit.AuditedContactField}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.getFromValue = function() {
  return /** @type{?proto.api.commons.audit.AuditedContactField} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.AuditedContactField, 1));
};


/**
 * @param {?proto.api.commons.audit.AuditedContactField|undefined} value
 * @return {!proto.api.commons.audit.ContactFieldChanges} returns this
*/
proto.api.commons.audit.ContactFieldChanges.prototype.setFromValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactFieldChanges} returns this
 */
proto.api.commons.audit.ContactFieldChanges.prototype.clearFromValue = function() {
  return this.setFromValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.hasFromValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AuditedContactField to_value = 2;
 * @return {?proto.api.commons.audit.AuditedContactField}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.getToValue = function() {
  return /** @type{?proto.api.commons.audit.AuditedContactField} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.audit.AuditedContactField, 2));
};


/**
 * @param {?proto.api.commons.audit.AuditedContactField|undefined} value
 * @return {!proto.api.commons.audit.ContactFieldChanges} returns this
*/
proto.api.commons.audit.ContactFieldChanges.prototype.setToValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.audit.ContactFieldChanges} returns this
 */
proto.api.commons.audit.ContactFieldChanges.prototype.clearToValue = function() {
  return this.setToValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactFieldChanges.prototype.hasToValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.AuditedContactField.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.AuditedContactField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.AuditedContactField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.AuditedContactField.toObject = function(includeInstance, msg) {
  var f, obj = {
contactFieldId: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, ""),
value: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.AuditedContactField}
 */
proto.api.commons.audit.AuditedContactField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.AuditedContactField;
  return proto.api.commons.audit.AuditedContactField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.AuditedContactField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.AuditedContactField}
 */
proto.api.commons.audit.AuditedContactField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactFieldId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.AuditedContactField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.AuditedContactField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.AuditedContactField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.AuditedContactField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactFieldId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 contact_field_id = 1;
 * @return {number}
 */
proto.api.commons.audit.AuditedContactField.prototype.getContactFieldId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.AuditedContactField} returns this
 */
proto.api.commons.audit.AuditedContactField.prototype.setContactFieldId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.commons.audit.AuditedContactField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.AuditedContactField} returns this
 */
proto.api.commons.audit.AuditedContactField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.api.commons.audit.AuditedContactField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.AuditedContactField} returns this
 */
proto.api.commons.audit.AuditedContactField.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.api.commons.audit.AuditedContactField.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.AuditedContactField} returns this
 */
proto.api.commons.audit.AuditedContactField.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.commons.audit.AuditedContactField} returns this
 */
proto.api.commons.audit.AuditedContactField.prototype.clearValue = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.AuditedContactField.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerListUploadEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerListUploadEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerListUploadEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
contactmanagerlistid: jspb.Message.getFieldWithDefault(msg, 1, 0),
numberofcontactsuploaded: jspb.Message.getFieldWithDefault(msg, 2, 0),
numberofsuccessfulcontactsuploaded: jspb.Message.getFieldWithDefault(msg, 3, 0),
numberoffailedcontacts: jspb.Message.getFieldWithDefault(msg, 4, 0),
numberofnewcontacts: jspb.Message.getFieldWithDefault(msg, 5, 0),
numberofduplicatecontacts: jspb.Message.getFieldWithDefault(msg, 6, 0),
dedupfieldtype: jspb.Message.getFieldWithDefault(msg, 7, 0),
dedupmergestrategy: jspb.Message.getFieldWithDefault(msg, 8, 0),
contactManagerListName: jspb.Message.getFieldWithDefault(msg, 9, ""),
fileName: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
uploadTaskId: jspb.Message.getFieldWithDefault(msg, 11, 0),
ttl: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerListUploadEvent;
  return proto.api.commons.audit.ContactManagerListUploadEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerListUploadEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerlistid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofcontactsuploaded(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofsuccessfulcontactsuploaded(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberoffailedcontacts(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofnewcontacts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofduplicatecontacts(value);
      break;
    case 7:
      var value = /** @type {!proto.api.commons.ClassifierEntityType} */ (reader.readEnum());
      msg.setDedupfieldtype(value);
      break;
    case 8:
      var value = /** @type {!proto.api.commons.DeDuplicationMergeStrategy} */ (reader.readEnum());
      msg.setDedupmergestrategy(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactManagerListName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUploadTaskId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerListUploadEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerListUploadEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerListUploadEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactmanagerlistid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNumberofcontactsuploaded();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNumberofsuccessfulcontactsuploaded();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNumberoffailedcontacts();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getNumberofnewcontacts();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNumberofduplicatecontacts();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getDedupfieldtype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getDedupmergestrategy();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getContactManagerListName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getUploadTaskId();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * optional int64 ContactManagerListId = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getContactmanagerlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setContactmanagerlistid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 NumberOfContactsUploaded = 2;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getNumberofcontactsuploaded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setNumberofcontactsuploaded = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 NumberOfSuccessfulContactsUploaded = 3;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getNumberofsuccessfulcontactsuploaded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setNumberofsuccessfulcontactsuploaded = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 NumberOfFailedContacts = 4;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getNumberoffailedcontacts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setNumberoffailedcontacts = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 NumberOfNewContacts = 5;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getNumberofnewcontacts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setNumberofnewcontacts = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 NumberOfDuplicateContacts = 6;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getNumberofduplicatecontacts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setNumberofduplicatecontacts = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional api.commons.ClassifierEntityType DeDupFieldType = 7;
 * @return {!proto.api.commons.ClassifierEntityType}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getDedupfieldtype = function() {
  return /** @type {!proto.api.commons.ClassifierEntityType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.api.commons.ClassifierEntityType} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setDedupfieldtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional api.commons.DeDuplicationMergeStrategy DeDupMergeStrategy = 8;
 * @return {!proto.api.commons.DeDuplicationMergeStrategy}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getDedupmergestrategy = function() {
  return /** @type {!proto.api.commons.DeDuplicationMergeStrategy} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.api.commons.DeDuplicationMergeStrategy} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setDedupmergestrategy = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string contact_manager_list_name = 9;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getContactManagerListName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setContactManagerListName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string file_name = 10;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setFileName = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.clearFileName = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 upload_task_id = 11;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getUploadTaskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setUploadTaskId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 ttl = 12;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerListUploadEvent} returns this
 */
proto.api.commons.audit.ContactManagerListUploadEvent.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.audit.ContactManagerKycEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerKycEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerKycEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
contactmanagerlistid: jspb.Message.getFieldWithDefault(msg, 1, 0),
contactmanagerentryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
typesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
contactmanagerentrylistidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent}
 */
proto.api.commons.audit.ContactManagerKycEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerKycEvent;
  return proto.api.commons.audit.ContactManagerKycEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent}
 */
proto.api.commons.audit.ContactManagerKycEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerlistid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerentryid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addContactmanagerentrylistids(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerKycEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerKycEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactmanagerlistid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getContactmanagerentryid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getContactmanagerentrylistidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 ContactManagerListId = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getContactmanagerlistid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setContactmanagerlistid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ContactManagerEntryId = 2;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getContactmanagerentryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setContactmanagerentryid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string types = 3;
 * @return {!Array<string>}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * repeated int64 ContactManagerEntryListIds = 4;
 * @return {!Array<number>}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getContactmanagerentrylistidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setContactmanagerentrylistidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.addContactmanagerentrylistids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.clearContactmanagerentrylistidsList = function() {
  return this.setContactmanagerentrylistidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntityAssociationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
contactmanagerentryid: jspb.Message.getFieldWithDefault(msg, 2, 0),
fromEntity: jspb.Message.getFieldWithDefault(msg, 3, ""),
toEntity: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntityAssociationEvent}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntityAssociationEvent;
  return proto.api.commons.audit.ContactManagerEntityAssociationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntityAssociationEvent}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactmanagerentryid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntityAssociationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactmanagerentryid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFromEntity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToEntity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 ContactManagerEntryId = 2;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.getContactmanagerentryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.setContactmanagerentryid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string from_entity = 3;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.getFromEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.setFromEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to_entity = 4;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.getToEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerEntityAssociationEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntityAssociationEvent.prototype.setToEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.api.commons.audit);
