// source: api/commons/audit/contactmanager_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var localGlobalThis = require("../../../global.js");
var proto = localGlobalThis.proto;
var goog = jspb;
var global = localGlobalThis || 
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var api_v1alpha1_contactmanager_contactmanager_pb = require('../../../api/v1alpha1/contactmanager/contactmanager_pb.js');
goog.object.extend(proto, api_v1alpha1_contactmanager_contactmanager_pb);
goog.exportSymbol('proto.api.commons.audit.ContactManagerDeleteEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryAddEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerEntryGetEncEvent', null, global);
goog.exportSymbol('proto.api.commons.audit.ContactManagerKycEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryAddEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryAddEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryAddEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryAddEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerEntryGetEncEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerEntryGetEncEvent.displayName = 'proto.api.commons.audit.ContactManagerEntryGetEncEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerDeleteEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerDeleteEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerDeleteEvent.displayName = 'proto.api.commons.audit.ContactManagerDeleteEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.audit.ContactManagerKycEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.audit.ContactManagerKycEvent.repeatedFields_, null);
};
goog.inherits(proto.api.commons.audit.ContactManagerKycEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.audit.ContactManagerKycEvent.displayName = 'proto.api.commons.audit.ContactManagerKycEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryAddEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryAddEvent;
  return proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryAddEvent}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryAddEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryAddEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryAddEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerEntryGetEncEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactManagerListId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contactManagerEntryId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createdById: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerEntryGetEncEvent;
  return proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactManagerListId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactManagerEntryId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedById(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerEntryGetEncEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactManagerListId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getContactManagerEntryId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreatedById();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 contact_manager_list_id = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.getContactManagerListId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.setContactManagerListId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 contact_manager_entry_id = 2;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.getContactManagerEntryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.setContactManagerEntryId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string created_by_id = 3;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.getCreatedById = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerEntryGetEncEvent} returns this
 */
proto.api.commons.audit.ContactManagerEntryGetEncEvent.prototype.setCreatedById = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerDeleteEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerDeleteEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactManagerListId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deletedBy: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerDeleteEvent;
  return proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactManagerListId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeletedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerDeleteEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerDeleteEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerDeleteEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactManagerListId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDeletedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 contact_manager_list_id = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.getContactManagerListId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent} returns this
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.setContactManagerListId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string deleted_by = 2;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.getDeletedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerDeleteEvent} returns this
 */
proto.api.commons.audit.ContactManagerDeleteEvent.prototype.setDeletedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.audit.ContactManagerKycEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.audit.ContactManagerKycEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerKycEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactManagerListId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kycDetailsList: jspb.Message.toObjectList(msg.getKycDetailsList(),
    api_v1alpha1_contactmanager_contactmanager_pb.ContactManagerEntryVal.toObject, includeInstance),
    projectId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdById: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isEncrypted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent}
 */
proto.api.commons.audit.ContactManagerKycEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.audit.ContactManagerKycEvent;
  return proto.api.commons.audit.ContactManagerKycEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent}
 */
proto.api.commons.audit.ContactManagerKycEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContactManagerListId(value);
      break;
    case 2:
      var value = new api_v1alpha1_contactmanager_contactmanager_pb.ContactManagerEntryVal;
      reader.readMessage(value,api_v1alpha1_contactmanager_contactmanager_pb.ContactManagerEntryVal.deserializeBinaryFromReader);
      msg.addKycDetails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedById(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEncrypted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.audit.ContactManagerKycEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.audit.ContactManagerKycEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.audit.ContactManagerKycEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactManagerListId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getKycDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      api_v1alpha1_contactmanager_contactmanager_pb.ContactManagerEntryVal.serializeBinaryToWriter
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedById();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsEncrypted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int64 contact_manager_list_id = 1;
 * @return {number}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getContactManagerListId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setContactManagerListId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated api.v1alpha1.contactmanager.ContactManagerEntryVal kyc_details = 2;
 * @return {!Array<!proto.api.v1alpha1.contactmanager.ContactManagerEntryVal>}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getKycDetailsList = function() {
  return /** @type{!Array<!proto.api.v1alpha1.contactmanager.ContactManagerEntryVal>} */ (
    jspb.Message.getRepeatedWrapperField(this, api_v1alpha1_contactmanager_contactmanager_pb.ContactManagerEntryVal, 2));
};


/**
 * @param {!Array<!proto.api.v1alpha1.contactmanager.ContactManagerEntryVal>} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
*/
proto.api.commons.audit.ContactManagerKycEvent.prototype.setKycDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.api.v1alpha1.contactmanager.ContactManagerEntryVal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.v1alpha1.contactmanager.ContactManagerEntryVal}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.addKycDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.api.v1alpha1.contactmanager.ContactManagerEntryVal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.clearKycDetailsList = function() {
  return this.setKycDetailsList([]);
};


/**
 * optional string project_id = 3;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string created_by_id = 4;
 * @return {string}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getCreatedById = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setCreatedById = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_encrypted = 5;
 * @return {boolean}
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.getIsEncrypted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.audit.ContactManagerKycEvent} returns this
 */
proto.api.commons.audit.ContactManagerKycEvent.prototype.setIsEncrypted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.api.commons.audit);
