// source: api/commons/compliance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var api_commons_communication_pb = require('../../api/commons/communication_pb.js');
goog.object.extend(proto, api_commons_communication_pb);
var api_commons_enums_pb = require('../../api/commons/enums_pb.js');
goog.object.extend(proto, api_commons_enums_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.api.commons.Channel', null, global);
goog.exportSymbol('proto.api.commons.ConsentAbsentAction', null, global);
goog.exportSymbol('proto.api.commons.ConsentCondition', null, global);
goog.exportSymbol('proto.api.commons.ContentType', null, global);
goog.exportSymbol('proto.api.commons.CountryCode', null, global);
goog.exportSymbol('proto.api.commons.DateExp', null, global);
goog.exportSymbol('proto.api.commons.DispositionField', null, global);
goog.exportSymbol('proto.api.commons.DispositionMod', null, global);
goog.exportSymbol('proto.api.commons.DispositionPair', null, global);
goog.exportSymbol('proto.api.commons.DnclExp', null, global);
goog.exportSymbol('proto.api.commons.Entity', null, global);
goog.exportSymbol('proto.api.commons.EntityExp', null, global);
goog.exportSymbol('proto.api.commons.Environment', null, global);
goog.exportSymbol('proto.api.commons.Field', null, global);
goog.exportSymbol('proto.api.commons.FieldNamesMod', null, global);
goog.exportSymbol('proto.api.commons.FrequencyExp', null, global);
goog.exportSymbol('proto.api.commons.HolidayExp', null, global);
goog.exportSymbol('proto.api.commons.LocationExp', null, global);
goog.exportSymbol('proto.api.commons.MetaFieldExp', null, global);
goog.exportSymbol('proto.api.commons.MonthExp', null, global);
goog.exportSymbol('proto.api.commons.PhoneType', null, global);
goog.exportSymbol('proto.api.commons.PhoneTypeExp', null, global);
goog.exportSymbol('proto.api.commons.PluginExp', null, global);
goog.exportSymbol('proto.api.commons.PluginType', null, global);
goog.exportSymbol('proto.api.commons.ResultsMod', null, global);
goog.exportSymbol('proto.api.commons.Rule', null, global);
goog.exportSymbol('proto.api.commons.RuleResponse', null, global);
goog.exportSymbol('proto.api.commons.ScenarioData', null, global);
goog.exportSymbol('proto.api.commons.ScenarioResult', null, global);
goog.exportSymbol('proto.api.commons.ScenarioRuleResponse', null, global);
goog.exportSymbol('proto.api.commons.ScrubEntryDetails', null, global);
goog.exportSymbol('proto.api.commons.Selector', null, global);
goog.exportSymbol('proto.api.commons.Selector.SelectionRuleCase', null, global);
goog.exportSymbol('proto.api.commons.SubEntity', null, global);
goog.exportSymbol('proto.api.commons.TimeExp', null, global);
goog.exportSymbol('proto.api.commons.Verb', null, global);
goog.exportSymbol('proto.api.commons.WeekdayExp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.Rule.repeatedFields_, null);
};
goog.inherits(proto.api.commons.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.Rule.displayName = 'proto.api.commons.Rule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.commons.Selector.oneofGroups_);
};
goog.inherits(proto.api.commons.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.Selector.displayName = 'proto.api.commons.Selector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.TimeExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.TimeExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.TimeExp.displayName = 'proto.api.commons.TimeExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.WeekdayExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.WeekdayExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.WeekdayExp.displayName = 'proto.api.commons.WeekdayExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DnclExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.DnclExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DnclExp.displayName = 'proto.api.commons.DnclExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.FrequencyExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.FrequencyExp.repeatedFields_, null);
};
goog.inherits(proto.api.commons.FrequencyExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.FrequencyExp.displayName = 'proto.api.commons.FrequencyExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.LocationExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.LocationExp.repeatedFields_, null);
};
goog.inherits(proto.api.commons.LocationExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.LocationExp.displayName = 'proto.api.commons.LocationExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.PhoneTypeExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.PhoneTypeExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.PhoneTypeExp.displayName = 'proto.api.commons.PhoneTypeExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.MonthExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.MonthExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.MonthExp.displayName = 'proto.api.commons.MonthExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DateExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.DateExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DateExp.displayName = 'proto.api.commons.DateExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.HolidayExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.HolidayExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.HolidayExp.displayName = 'proto.api.commons.HolidayExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.MetaFieldExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.MetaFieldExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.MetaFieldExp.displayName = 'proto.api.commons.MetaFieldExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.PluginExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.PluginExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.PluginExp.displayName = 'proto.api.commons.PluginExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.EntityExp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.EntityExp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.EntityExp.displayName = 'proto.api.commons.EntityExp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.FieldNamesMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.FieldNamesMod.repeatedFields_, null);
};
goog.inherits(proto.api.commons.FieldNamesMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.FieldNamesMod.displayName = 'proto.api.commons.FieldNamesMod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ResultsMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.ResultsMod.repeatedFields_, null);
};
goog.inherits(proto.api.commons.ResultsMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ResultsMod.displayName = 'proto.api.commons.ResultsMod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DispositionMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.DispositionMod.repeatedFields_, null);
};
goog.inherits(proto.api.commons.DispositionMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DispositionMod.displayName = 'proto.api.commons.DispositionMod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DispositionField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.DispositionField.repeatedFields_, null);
};
goog.inherits(proto.api.commons.DispositionField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DispositionField.displayName = 'proto.api.commons.DispositionField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DispositionPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.DispositionPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DispositionPair.displayName = 'proto.api.commons.DispositionPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.Field.displayName = 'proto.api.commons.Field';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ConsentCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.ConsentCondition.repeatedFields_, null);
};
goog.inherits(proto.api.commons.ConsentCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ConsentCondition.displayName = 'proto.api.commons.ConsentCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ScenarioData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.ScenarioData.repeatedFields_, null);
};
goog.inherits(proto.api.commons.ScenarioData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ScenarioData.displayName = 'proto.api.commons.ScenarioData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.CountryCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.CountryCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.CountryCode.displayName = 'proto.api.commons.CountryCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ScenarioResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.commons.ScenarioResult.repeatedFields_, null);
};
goog.inherits(proto.api.commons.ScenarioResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ScenarioResult.displayName = 'proto.api.commons.ScenarioResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ScenarioRuleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.ScenarioRuleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ScenarioRuleResponse.displayName = 'proto.api.commons.ScenarioRuleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ScrubEntryDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.ScrubEntryDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ScrubEntryDetails.displayName = 'proto.api.commons.ScrubEntryDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.RuleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.RuleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.RuleResponse.displayName = 'proto.api.commons.RuleResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.Rule.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {
    verb: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subEntity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    selectorsList: jspb.Message.toObjectList(msg.getSelectorsList(),
    proto.api.commons.Selector.toObject, includeInstance),
    ruleText: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.Rule}
 */
proto.api.commons.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.Rule;
  return proto.api.commons.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.Rule}
 */
proto.api.commons.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.Verb} */ (reader.readEnum());
      msg.setVerb(value);
      break;
    case 2:
      var value = /** @type {!proto.api.commons.Entity} */ (reader.readEnum());
      msg.setEntity(value);
      break;
    case 3:
      var value = /** @type {!proto.api.commons.SubEntity} */ (reader.readEnum());
      msg.setSubEntity(value);
      break;
    case 4:
      var value = new proto.api.commons.Selector;
      reader.readMessage(value,proto.api.commons.Selector.deserializeBinaryFromReader);
      msg.addSelectors(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerb();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEntity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubEntity();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSelectorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.commons.Selector.serializeBinaryToWriter
    );
  }
  f = message.getRuleText();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Verb verb = 1;
 * @return {!proto.api.commons.Verb}
 */
proto.api.commons.Rule.prototype.getVerb = function() {
  return /** @type {!proto.api.commons.Verb} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.Verb} value
 * @return {!proto.api.commons.Rule} returns this
 */
proto.api.commons.Rule.prototype.setVerb = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Entity entity = 2;
 * @return {!proto.api.commons.Entity}
 */
proto.api.commons.Rule.prototype.getEntity = function() {
  return /** @type {!proto.api.commons.Entity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.api.commons.Entity} value
 * @return {!proto.api.commons.Rule} returns this
 */
proto.api.commons.Rule.prototype.setEntity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SubEntity sub_entity = 3;
 * @return {!proto.api.commons.SubEntity}
 */
proto.api.commons.Rule.prototype.getSubEntity = function() {
  return /** @type {!proto.api.commons.SubEntity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.commons.SubEntity} value
 * @return {!proto.api.commons.Rule} returns this
 */
proto.api.commons.Rule.prototype.setSubEntity = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Selector selectors = 4;
 * @return {!Array<!proto.api.commons.Selector>}
 */
proto.api.commons.Rule.prototype.getSelectorsList = function() {
  return /** @type{!Array<!proto.api.commons.Selector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.Selector, 4));
};


/**
 * @param {!Array<!proto.api.commons.Selector>} value
 * @return {!proto.api.commons.Rule} returns this
*/
proto.api.commons.Rule.prototype.setSelectorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.commons.Selector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.Selector}
 */
proto.api.commons.Rule.prototype.addSelectors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.commons.Selector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.Rule} returns this
 */
proto.api.commons.Rule.prototype.clearSelectorsList = function() {
  return this.setSelectorsList([]);
};


/**
 * optional string rule_text = 6;
 * @return {string}
 */
proto.api.commons.Rule.prototype.getRuleText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.Rule} returns this
 */
proto.api.commons.Rule.prototype.setRuleText = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.commons.Selector.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.api.commons.Selector.SelectionRuleCase = {
  SELECTION_RULE_NOT_SET: 0,
  TIME: 1,
  WEEK: 2,
  DNCL: 3,
  FREQUENCY: 4,
  LOCATION: 5,
  PHONE_TYPE: 6,
  MONTH: 7,
  DATE: 8,
  HOLIDAY: 9,
  META: 10,
  PLUGIN: 11
};

/**
 * @return {proto.api.commons.Selector.SelectionRuleCase}
 */
proto.api.commons.Selector.prototype.getSelectionRuleCase = function() {
  return /** @type {proto.api.commons.Selector.SelectionRuleCase} */(jspb.Message.computeOneofCase(this, proto.api.commons.Selector.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && proto.api.commons.TimeExp.toObject(includeInstance, f),
    week: (f = msg.getWeek()) && proto.api.commons.WeekdayExp.toObject(includeInstance, f),
    dncl: (f = msg.getDncl()) && proto.api.commons.DnclExp.toObject(includeInstance, f),
    frequency: (f = msg.getFrequency()) && proto.api.commons.FrequencyExp.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.api.commons.LocationExp.toObject(includeInstance, f),
    phoneType: (f = msg.getPhoneType()) && proto.api.commons.PhoneTypeExp.toObject(includeInstance, f),
    month: (f = msg.getMonth()) && proto.api.commons.MonthExp.toObject(includeInstance, f),
    date: (f = msg.getDate()) && proto.api.commons.DateExp.toObject(includeInstance, f),
    holiday: (f = msg.getHoliday()) && proto.api.commons.HolidayExp.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.api.commons.MetaFieldExp.toObject(includeInstance, f),
    plugin: (f = msg.getPlugin()) && proto.api.commons.PluginExp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.Selector}
 */
proto.api.commons.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.Selector;
  return proto.api.commons.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.Selector}
 */
proto.api.commons.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.TimeExp;
      reader.readMessage(value,proto.api.commons.TimeExp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.api.commons.WeekdayExp;
      reader.readMessage(value,proto.api.commons.WeekdayExp.deserializeBinaryFromReader);
      msg.setWeek(value);
      break;
    case 3:
      var value = new proto.api.commons.DnclExp;
      reader.readMessage(value,proto.api.commons.DnclExp.deserializeBinaryFromReader);
      msg.setDncl(value);
      break;
    case 4:
      var value = new proto.api.commons.FrequencyExp;
      reader.readMessage(value,proto.api.commons.FrequencyExp.deserializeBinaryFromReader);
      msg.setFrequency(value);
      break;
    case 5:
      var value = new proto.api.commons.LocationExp;
      reader.readMessage(value,proto.api.commons.LocationExp.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 6:
      var value = new proto.api.commons.PhoneTypeExp;
      reader.readMessage(value,proto.api.commons.PhoneTypeExp.deserializeBinaryFromReader);
      msg.setPhoneType(value);
      break;
    case 7:
      var value = new proto.api.commons.MonthExp;
      reader.readMessage(value,proto.api.commons.MonthExp.deserializeBinaryFromReader);
      msg.setMonth(value);
      break;
    case 8:
      var value = new proto.api.commons.DateExp;
      reader.readMessage(value,proto.api.commons.DateExp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 9:
      var value = new proto.api.commons.HolidayExp;
      reader.readMessage(value,proto.api.commons.HolidayExp.deserializeBinaryFromReader);
      msg.setHoliday(value);
      break;
    case 10:
      var value = new proto.api.commons.MetaFieldExp;
      reader.readMessage(value,proto.api.commons.MetaFieldExp.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 11:
      var value = new proto.api.commons.PluginExp;
      reader.readMessage(value,proto.api.commons.PluginExp.deserializeBinaryFromReader);
      msg.setPlugin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.commons.TimeExp.serializeBinaryToWriter
    );
  }
  f = message.getWeek();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.commons.WeekdayExp.serializeBinaryToWriter
    );
  }
  f = message.getDncl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.commons.DnclExp.serializeBinaryToWriter
    );
  }
  f = message.getFrequency();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.commons.FrequencyExp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.commons.LocationExp.serializeBinaryToWriter
    );
  }
  f = message.getPhoneType();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.commons.PhoneTypeExp.serializeBinaryToWriter
    );
  }
  f = message.getMonth();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.commons.MonthExp.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.commons.DateExp.serializeBinaryToWriter
    );
  }
  f = message.getHoliday();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.api.commons.HolidayExp.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.api.commons.MetaFieldExp.serializeBinaryToWriter
    );
  }
  f = message.getPlugin();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.api.commons.PluginExp.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeExp time = 1;
 * @return {?proto.api.commons.TimeExp}
 */
proto.api.commons.Selector.prototype.getTime = function() {
  return /** @type{?proto.api.commons.TimeExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.TimeExp, 1));
};


/**
 * @param {?proto.api.commons.TimeExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WeekdayExp week = 2;
 * @return {?proto.api.commons.WeekdayExp}
 */
proto.api.commons.Selector.prototype.getWeek = function() {
  return /** @type{?proto.api.commons.WeekdayExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.WeekdayExp, 2));
};


/**
 * @param {?proto.api.commons.WeekdayExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setWeek = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearWeek = function() {
  return this.setWeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasWeek = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DnclExp dncl = 3;
 * @return {?proto.api.commons.DnclExp}
 */
proto.api.commons.Selector.prototype.getDncl = function() {
  return /** @type{?proto.api.commons.DnclExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.DnclExp, 3));
};


/**
 * @param {?proto.api.commons.DnclExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setDncl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearDncl = function() {
  return this.setDncl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasDncl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FrequencyExp frequency = 4;
 * @return {?proto.api.commons.FrequencyExp}
 */
proto.api.commons.Selector.prototype.getFrequency = function() {
  return /** @type{?proto.api.commons.FrequencyExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.FrequencyExp, 4));
};


/**
 * @param {?proto.api.commons.FrequencyExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setFrequency = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearFrequency = function() {
  return this.setFrequency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LocationExp location = 5;
 * @return {?proto.api.commons.LocationExp}
 */
proto.api.commons.Selector.prototype.getLocation = function() {
  return /** @type{?proto.api.commons.LocationExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.LocationExp, 5));
};


/**
 * @param {?proto.api.commons.LocationExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PhoneTypeExp phone_type = 6;
 * @return {?proto.api.commons.PhoneTypeExp}
 */
proto.api.commons.Selector.prototype.getPhoneType = function() {
  return /** @type{?proto.api.commons.PhoneTypeExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.PhoneTypeExp, 6));
};


/**
 * @param {?proto.api.commons.PhoneTypeExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setPhoneType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearPhoneType = function() {
  return this.setPhoneType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasPhoneType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MonthExp month = 7;
 * @return {?proto.api.commons.MonthExp}
 */
proto.api.commons.Selector.prototype.getMonth = function() {
  return /** @type{?proto.api.commons.MonthExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.MonthExp, 7));
};


/**
 * @param {?proto.api.commons.MonthExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setMonth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearMonth = function() {
  return this.setMonth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasMonth = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DateExp date = 8;
 * @return {?proto.api.commons.DateExp}
 */
proto.api.commons.Selector.prototype.getDate = function() {
  return /** @type{?proto.api.commons.DateExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.DateExp, 8));
};


/**
 * @param {?proto.api.commons.DateExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setDate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasDate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional HolidayExp holiday = 9;
 * @return {?proto.api.commons.HolidayExp}
 */
proto.api.commons.Selector.prototype.getHoliday = function() {
  return /** @type{?proto.api.commons.HolidayExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.HolidayExp, 9));
};


/**
 * @param {?proto.api.commons.HolidayExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setHoliday = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearHoliday = function() {
  return this.setHoliday(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasHoliday = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MetaFieldExp meta = 10;
 * @return {?proto.api.commons.MetaFieldExp}
 */
proto.api.commons.Selector.prototype.getMeta = function() {
  return /** @type{?proto.api.commons.MetaFieldExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.MetaFieldExp, 10));
};


/**
 * @param {?proto.api.commons.MetaFieldExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setMeta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PluginExp plugin = 11;
 * @return {?proto.api.commons.PluginExp}
 */
proto.api.commons.Selector.prototype.getPlugin = function() {
  return /** @type{?proto.api.commons.PluginExp} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.PluginExp, 11));
};


/**
 * @param {?proto.api.commons.PluginExp|undefined} value
 * @return {!proto.api.commons.Selector} returns this
*/
proto.api.commons.Selector.prototype.setPlugin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.api.commons.Selector.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Selector} returns this
 */
proto.api.commons.Selector.prototype.clearPlugin = function() {
  return this.setPlugin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Selector.prototype.hasPlugin = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.TimeExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.TimeExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.TimeExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.TimeExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    startHour: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endHour: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.TimeExp}
 */
proto.api.commons.TimeExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.TimeExp;
  return proto.api.commons.TimeExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.TimeExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.TimeExp}
 */
proto.api.commons.TimeExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartHour(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndHour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.TimeExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.TimeExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.TimeExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.TimeExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartHour();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndHour();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string start_hour = 1;
 * @return {string}
 */
proto.api.commons.TimeExp.prototype.getStartHour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.TimeExp} returns this
 */
proto.api.commons.TimeExp.prototype.setStartHour = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string end_hour = 2;
 * @return {string}
 */
proto.api.commons.TimeExp.prototype.getEndHour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.TimeExp} returns this
 */
proto.api.commons.TimeExp.prototype.setEndHour = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.WeekdayExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.WeekdayExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.WeekdayExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.WeekdayExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    day: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.WeekdayExp}
 */
proto.api.commons.WeekdayExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.WeekdayExp;
  return proto.api.commons.WeekdayExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.WeekdayExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.WeekdayExp}
 */
proto.api.commons.WeekdayExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.Weekday.Enum} */ (reader.readEnum());
      msg.setDay(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.WeekdayExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.WeekdayExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.WeekdayExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.WeekdayExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDay();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Weekday.Enum day = 1;
 * @return {!proto.api.commons.Weekday.Enum}
 */
proto.api.commons.WeekdayExp.prototype.getDay = function() {
  return /** @type {!proto.api.commons.Weekday.Enum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.Weekday.Enum} value
 * @return {!proto.api.commons.WeekdayExp} returns this
 */
proto.api.commons.WeekdayExp.prototype.setDay = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.api.commons.WeekdayExp.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.WeekdayExp} returns this
 */
proto.api.commons.WeekdayExp.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DnclExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DnclExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DnclExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DnclExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    listName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldNames: (f = msg.getFieldNames()) && proto.api.commons.FieldNamesMod.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DnclExp}
 */
proto.api.commons.DnclExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DnclExp;
  return proto.api.commons.DnclExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DnclExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DnclExp}
 */
proto.api.commons.DnclExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListName(value);
      break;
    case 2:
      var value = new proto.api.commons.FieldNamesMod;
      reader.readMessage(value,proto.api.commons.FieldNamesMod.deserializeBinaryFromReader);
      msg.setFieldNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DnclExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DnclExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DnclExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DnclExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldNames();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.commons.FieldNamesMod.serializeBinaryToWriter
    );
  }
};


/**
 * optional string list_name = 1;
 * @return {string}
 */
proto.api.commons.DnclExp.prototype.getListName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.DnclExp} returns this
 */
proto.api.commons.DnclExp.prototype.setListName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FieldNamesMod field_names = 2;
 * @return {?proto.api.commons.FieldNamesMod}
 */
proto.api.commons.DnclExp.prototype.getFieldNames = function() {
  return /** @type{?proto.api.commons.FieldNamesMod} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.FieldNamesMod, 2));
};


/**
 * @param {?proto.api.commons.FieldNamesMod|undefined} value
 * @return {!proto.api.commons.DnclExp} returns this
*/
proto.api.commons.DnclExp.prototype.setFieldNames = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.DnclExp} returns this
 */
proto.api.commons.DnclExp.prototype.clearFieldNames = function() {
  return this.setFieldNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.DnclExp.prototype.hasFieldNames = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.FrequencyExp.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.FrequencyExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.FrequencyExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.FrequencyExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.FrequencyExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    results: (f = msg.getResults()) && proto.api.commons.ResultsMod.toObject(includeInstance, f),
    dispositions: (f = msg.getDispositions()) && proto.api.commons.DispositionMod.toObject(includeInstance, f),
    fieldNames: (f = msg.getFieldNames()) && proto.api.commons.FieldNamesMod.toObject(includeInstance, f),
    checkingEntitiesList: jspb.Message.toObjectList(msg.getCheckingEntitiesList(),
    proto.api.commons.EntityExp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.FrequencyExp}
 */
proto.api.commons.FrequencyExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.FrequencyExp;
  return proto.api.commons.FrequencyExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.FrequencyExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.FrequencyExp}
 */
proto.api.commons.FrequencyExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.api.commons.ResultsMod;
      reader.readMessage(value,proto.api.commons.ResultsMod.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    case 4:
      var value = new proto.api.commons.DispositionMod;
      reader.readMessage(value,proto.api.commons.DispositionMod.deserializeBinaryFromReader);
      msg.setDispositions(value);
      break;
    case 5:
      var value = new proto.api.commons.FieldNamesMod;
      reader.readMessage(value,proto.api.commons.FieldNamesMod.deserializeBinaryFromReader);
      msg.setFieldNames(value);
      break;
    case 6:
      var value = new proto.api.commons.EntityExp;
      reader.readMessage(value,proto.api.commons.EntityExp.deserializeBinaryFromReader);
      msg.addCheckingEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.FrequencyExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.FrequencyExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.FrequencyExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.FrequencyExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.commons.ResultsMod.serializeBinaryToWriter
    );
  }
  f = message.getDispositions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.commons.DispositionMod.serializeBinaryToWriter
    );
  }
  f = message.getFieldNames();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.commons.FieldNamesMod.serializeBinaryToWriter
    );
  }
  f = message.getCheckingEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.api.commons.EntityExp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 count = 1;
 * @return {number}
 */
proto.api.commons.FrequencyExp.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 duration = 2;
 * @return {number}
 */
proto.api.commons.FrequencyExp.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ResultsMod results = 3;
 * @return {?proto.api.commons.ResultsMod}
 */
proto.api.commons.FrequencyExp.prototype.getResults = function() {
  return /** @type{?proto.api.commons.ResultsMod} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.ResultsMod, 3));
};


/**
 * @param {?proto.api.commons.ResultsMod|undefined} value
 * @return {!proto.api.commons.FrequencyExp} returns this
*/
proto.api.commons.FrequencyExp.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.FrequencyExp.prototype.hasResults = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DispositionMod dispositions = 4;
 * @return {?proto.api.commons.DispositionMod}
 */
proto.api.commons.FrequencyExp.prototype.getDispositions = function() {
  return /** @type{?proto.api.commons.DispositionMod} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.DispositionMod, 4));
};


/**
 * @param {?proto.api.commons.DispositionMod|undefined} value
 * @return {!proto.api.commons.FrequencyExp} returns this
*/
proto.api.commons.FrequencyExp.prototype.setDispositions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.clearDispositions = function() {
  return this.setDispositions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.FrequencyExp.prototype.hasDispositions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FieldNamesMod field_names = 5;
 * @return {?proto.api.commons.FieldNamesMod}
 */
proto.api.commons.FrequencyExp.prototype.getFieldNames = function() {
  return /** @type{?proto.api.commons.FieldNamesMod} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.FieldNamesMod, 5));
};


/**
 * @param {?proto.api.commons.FieldNamesMod|undefined} value
 * @return {!proto.api.commons.FrequencyExp} returns this
*/
proto.api.commons.FrequencyExp.prototype.setFieldNames = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.clearFieldNames = function() {
  return this.setFieldNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.FrequencyExp.prototype.hasFieldNames = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated EntityExp checking_entities = 6;
 * @return {!Array<!proto.api.commons.EntityExp>}
 */
proto.api.commons.FrequencyExp.prototype.getCheckingEntitiesList = function() {
  return /** @type{!Array<!proto.api.commons.EntityExp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.EntityExp, 6));
};


/**
 * @param {!Array<!proto.api.commons.EntityExp>} value
 * @return {!proto.api.commons.FrequencyExp} returns this
*/
proto.api.commons.FrequencyExp.prototype.setCheckingEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.api.commons.EntityExp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.EntityExp}
 */
proto.api.commons.FrequencyExp.prototype.addCheckingEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.api.commons.EntityExp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.FrequencyExp} returns this
 */
proto.api.commons.FrequencyExp.prototype.clearCheckingEntitiesList = function() {
  return this.setCheckingEntitiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.LocationExp.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.LocationExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.LocationExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.LocationExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.LocationExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    county: jspb.Message.getFieldWithDefault(msg, 3, ""),
    city: jspb.Message.getFieldWithDefault(msg, 4, ""),
    province: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postalCodesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    areaCodesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.LocationExp}
 */
proto.api.commons.LocationExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.LocationExp;
  return proto.api.commons.LocationExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.LocationExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.LocationExp}
 */
proto.api.commons.LocationExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvince(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPostalCodes(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAreaCodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.LocationExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.LocationExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.LocationExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.LocationExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProvince();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostalCodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getAreaCodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.api.commons.LocationExp.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string state = 2;
 * @return {string}
 */
proto.api.commons.LocationExp.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string county = 3;
 * @return {string}
 */
proto.api.commons.LocationExp.prototype.getCounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setCounty = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string city = 4;
 * @return {string}
 */
proto.api.commons.LocationExp.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string province = 5;
 * @return {string}
 */
proto.api.commons.LocationExp.prototype.getProvince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setProvince = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string postal_codes = 6;
 * @return {!Array<string>}
 */
proto.api.commons.LocationExp.prototype.getPostalCodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setPostalCodesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.addPostalCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.clearPostalCodesList = function() {
  return this.setPostalCodesList([]);
};


/**
 * repeated string area_codes = 7;
 * @return {!Array<string>}
 */
proto.api.commons.LocationExp.prototype.getAreaCodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.setAreaCodesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.addAreaCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.LocationExp} returns this
 */
proto.api.commons.LocationExp.prototype.clearAreaCodesList = function() {
  return this.setAreaCodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.PhoneTypeExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.PhoneTypeExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.PhoneTypeExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PhoneTypeExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.PhoneTypeExp}
 */
proto.api.commons.PhoneTypeExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.PhoneTypeExp;
  return proto.api.commons.PhoneTypeExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.PhoneTypeExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.PhoneTypeExp}
 */
proto.api.commons.PhoneTypeExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.PhoneType} */ (reader.readEnum());
      msg.setPhoneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.PhoneTypeExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.PhoneTypeExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.PhoneTypeExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PhoneTypeExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PhoneType phone_type = 1;
 * @return {!proto.api.commons.PhoneType}
 */
proto.api.commons.PhoneTypeExp.prototype.getPhoneType = function() {
  return /** @type {!proto.api.commons.PhoneType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.PhoneType} value
 * @return {!proto.api.commons.PhoneTypeExp} returns this
 */
proto.api.commons.PhoneTypeExp.prototype.setPhoneType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.MonthExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.MonthExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.MonthExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.MonthExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    month: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.MonthExp}
 */
proto.api.commons.MonthExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.MonthExp;
  return proto.api.commons.MonthExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.MonthExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.MonthExp}
 */
proto.api.commons.MonthExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.Month} */ (reader.readEnum());
      msg.setMonth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.MonthExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.MonthExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.MonthExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.MonthExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonth();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Month month = 1;
 * @return {!proto.api.commons.Month}
 */
proto.api.commons.MonthExp.prototype.getMonth = function() {
  return /** @type {!proto.api.commons.Month} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.Month} value
 * @return {!proto.api.commons.MonthExp} returns this
 */
proto.api.commons.MonthExp.prototype.setMonth = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.api.commons.MonthExp.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.MonthExp} returns this
 */
proto.api.commons.MonthExp.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DateExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DateExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DateExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DateExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    month: jspb.Message.getFieldWithDefault(msg, 1, 0),
    day: jspb.Message.getFieldWithDefault(msg, 2, 0),
    year: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DateExp}
 */
proto.api.commons.DateExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DateExp;
  return proto.api.commons.DateExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DateExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DateExp}
 */
proto.api.commons.DateExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.Month} */ (reader.readEnum());
      msg.setMonth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DateExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DateExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DateExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DateExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonth();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional Month month = 1;
 * @return {!proto.api.commons.Month}
 */
proto.api.commons.DateExp.prototype.getMonth = function() {
  return /** @type {!proto.api.commons.Month} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.Month} value
 * @return {!proto.api.commons.DateExp} returns this
 */
proto.api.commons.DateExp.prototype.setMonth = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 day = 2;
 * @return {number}
 */
proto.api.commons.DateExp.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.DateExp} returns this
 */
proto.api.commons.DateExp.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 year = 3;
 * @return {number}
 */
proto.api.commons.DateExp.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.DateExp} returns this
 */
proto.api.commons.DateExp.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.HolidayExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.HolidayExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.HolidayExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.HolidayExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    country: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.HolidayExp}
 */
proto.api.commons.HolidayExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.HolidayExp;
  return proto.api.commons.HolidayExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.HolidayExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.HolidayExp}
 */
proto.api.commons.HolidayExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.HolidayExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.HolidayExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.HolidayExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.HolidayExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.commons.HolidayExp.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.HolidayExp} returns this
 */
proto.api.commons.HolidayExp.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string country = 2;
 * @return {string}
 */
proto.api.commons.HolidayExp.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.HolidayExp} returns this
 */
proto.api.commons.HolidayExp.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.api.commons.HolidayExp.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.HolidayExp} returns this
 */
proto.api.commons.HolidayExp.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.MetaFieldExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.MetaFieldExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.MetaFieldExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.MetaFieldExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.MetaFieldExp}
 */
proto.api.commons.MetaFieldExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.MetaFieldExp;
  return proto.api.commons.MetaFieldExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.MetaFieldExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.MetaFieldExp}
 */
proto.api.commons.MetaFieldExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.MetaFieldExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.MetaFieldExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.MetaFieldExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.MetaFieldExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.api.commons.MetaFieldExp.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.MetaFieldExp} returns this
 */
proto.api.commons.MetaFieldExp.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.PluginExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.PluginExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.PluginExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PluginExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tcnStrict: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    licenseId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referenceKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    env: jspb.Message.getFieldWithDefault(msg, 6, 0),
    profileName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    contentField: jspb.Message.getFieldWithDefault(msg, 8, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 9, ""),
    absentAction: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dateLastContact: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.PluginExp}
 */
proto.api.commons.PluginExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.PluginExp;
  return proto.api.commons.PluginExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.PluginExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.PluginExp}
 */
proto.api.commons.PluginExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.PluginType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcnStrict(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromNumber(value);
      break;
    case 6:
      var value = /** @type {!proto.api.commons.Environment} */ (reader.readEnum());
      msg.setEnv(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentField(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 11:
      var value = /** @type {!proto.api.commons.ConsentAbsentAction} */ (reader.readEnum());
      msg.setAbsentAction(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateLastContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.PluginExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.PluginExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.PluginExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PluginExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTcnStrict();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLicenseId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferenceKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnv();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getProfileName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContentField();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAbsentAction();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getDateLastContact();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional PluginType type = 1;
 * @return {!proto.api.commons.PluginType}
 */
proto.api.commons.PluginExp.prototype.getType = function() {
  return /** @type {!proto.api.commons.PluginType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.PluginType} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool tcn_strict = 4;
 * @return {boolean}
 */
proto.api.commons.PluginExp.prototype.getTcnStrict = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setTcnStrict = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string license_id = 2;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getLicenseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setLicenseId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reference_key = 3;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getReferenceKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setReferenceKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from_number = 5;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getFromNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setFromNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Environment env = 6;
 * @return {!proto.api.commons.Environment}
 */
proto.api.commons.PluginExp.prototype.getEnv = function() {
  return /** @type {!proto.api.commons.Environment} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.api.commons.Environment} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setEnv = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string profile_name = 7;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getProfileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setProfileName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string content_field = 8;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getContentField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setContentField = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string topic = 9;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional ConsentAbsentAction absent_action = 11;
 * @return {!proto.api.commons.ConsentAbsentAction}
 */
proto.api.commons.PluginExp.prototype.getAbsentAction = function() {
  return /** @type {!proto.api.commons.ConsentAbsentAction} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.api.commons.ConsentAbsentAction} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setAbsentAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional string date_last_contact = 10;
 * @return {string}
 */
proto.api.commons.PluginExp.prototype.getDateLastContact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.PluginExp} returns this
 */
proto.api.commons.PluginExp.prototype.setDateLastContact = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.EntityExp.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.EntityExp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.EntityExp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.EntityExp.toObject = function(includeInstance, msg) {
  var f, obj = {
    subEntity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.EntityExp}
 */
proto.api.commons.EntityExp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.EntityExp;
  return proto.api.commons.EntityExp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.EntityExp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.EntityExp}
 */
proto.api.commons.EntityExp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.SubEntity} */ (reader.readEnum());
      msg.setSubEntity(value);
      break;
    case 2:
      var value = /** @type {!proto.api.commons.Entity} */ (reader.readEnum());
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.EntityExp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.EntityExp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.EntityExp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.EntityExp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubEntity();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEntity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional SubEntity sub_entity = 1;
 * @return {!proto.api.commons.SubEntity}
 */
proto.api.commons.EntityExp.prototype.getSubEntity = function() {
  return /** @type {!proto.api.commons.SubEntity} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.SubEntity} value
 * @return {!proto.api.commons.EntityExp} returns this
 */
proto.api.commons.EntityExp.prototype.setSubEntity = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Entity entity = 2;
 * @return {!proto.api.commons.Entity}
 */
proto.api.commons.EntityExp.prototype.getEntity = function() {
  return /** @type {!proto.api.commons.Entity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.api.commons.Entity} value
 * @return {!proto.api.commons.EntityExp} returns this
 */
proto.api.commons.EntityExp.prototype.setEntity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.FieldNamesMod.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.FieldNamesMod.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.FieldNamesMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.FieldNamesMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.FieldNamesMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNamesList: jspb.Message.toObjectList(msg.getFieldNamesList(),
    proto.api.commons.Field.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.FieldNamesMod}
 */
proto.api.commons.FieldNamesMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.FieldNamesMod;
  return proto.api.commons.FieldNamesMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.FieldNamesMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.FieldNamesMod}
 */
proto.api.commons.FieldNamesMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.Field;
      reader.readMessage(value,proto.api.commons.Field.deserializeBinaryFromReader);
      msg.addFieldNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.FieldNamesMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.FieldNamesMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.FieldNamesMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.FieldNamesMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.commons.Field.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Field field_names = 1;
 * @return {!Array<!proto.api.commons.Field>}
 */
proto.api.commons.FieldNamesMod.prototype.getFieldNamesList = function() {
  return /** @type{!Array<!proto.api.commons.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.Field, 1));
};


/**
 * @param {!Array<!proto.api.commons.Field>} value
 * @return {!proto.api.commons.FieldNamesMod} returns this
*/
proto.api.commons.FieldNamesMod.prototype.setFieldNamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.commons.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.Field}
 */
proto.api.commons.FieldNamesMod.prototype.addFieldNames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.commons.Field, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.FieldNamesMod} returns this
 */
proto.api.commons.FieldNamesMod.prototype.clearFieldNamesList = function() {
  return this.setFieldNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.ResultsMod.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ResultsMod.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ResultsMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ResultsMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ResultsMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ResultsMod}
 */
proto.api.commons.ResultsMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ResultsMod;
  return proto.api.commons.ResultsMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ResultsMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ResultsMod}
 */
proto.api.commons.ResultsMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ResultsMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ResultsMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ResultsMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ResultsMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string results = 1;
 * @return {!Array<string>}
 */
proto.api.commons.ResultsMod.prototype.getResultsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.commons.ResultsMod} returns this
 */
proto.api.commons.ResultsMod.prototype.setResultsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.ResultsMod} returns this
 */
proto.api.commons.ResultsMod.prototype.addResults = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.ResultsMod} returns this
 */
proto.api.commons.ResultsMod.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.DispositionMod.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DispositionMod.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DispositionMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DispositionMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    dispositionsList: jspb.Message.toObjectList(msg.getDispositionsList(),
    proto.api.commons.DispositionField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DispositionMod}
 */
proto.api.commons.DispositionMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DispositionMod;
  return proto.api.commons.DispositionMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DispositionMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DispositionMod}
 */
proto.api.commons.DispositionMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.commons.DispositionField;
      reader.readMessage(value,proto.api.commons.DispositionField.deserializeBinaryFromReader);
      msg.addDispositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DispositionMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DispositionMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DispositionMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDispositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.commons.DispositionField.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DispositionField dispositions = 1;
 * @return {!Array<!proto.api.commons.DispositionField>}
 */
proto.api.commons.DispositionMod.prototype.getDispositionsList = function() {
  return /** @type{!Array<!proto.api.commons.DispositionField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.DispositionField, 1));
};


/**
 * @param {!Array<!proto.api.commons.DispositionField>} value
 * @return {!proto.api.commons.DispositionMod} returns this
*/
proto.api.commons.DispositionMod.prototype.setDispositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.commons.DispositionField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.DispositionField}
 */
proto.api.commons.DispositionMod.prototype.addDispositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.commons.DispositionField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.DispositionMod} returns this
 */
proto.api.commons.DispositionMod.prototype.clearDispositionsList = function() {
  return this.setDispositionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.DispositionField.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DispositionField.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DispositionField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DispositionField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionField.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pairsList: jspb.Message.toObjectList(msg.getPairsList(),
    proto.api.commons.DispositionPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DispositionField}
 */
proto.api.commons.DispositionField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DispositionField;
  return proto.api.commons.DispositionField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DispositionField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DispositionField}
 */
proto.api.commons.DispositionField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.api.commons.DispositionPair;
      reader.readMessage(value,proto.api.commons.DispositionPair.deserializeBinaryFromReader);
      msg.addPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DispositionField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DispositionField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DispositionField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.commons.DispositionPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.commons.DispositionField.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.DispositionField} returns this
 */
proto.api.commons.DispositionField.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.commons.DispositionField.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.DispositionField} returns this
 */
proto.api.commons.DispositionField.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated DispositionPair pairs = 3;
 * @return {!Array<!proto.api.commons.DispositionPair>}
 */
proto.api.commons.DispositionField.prototype.getPairsList = function() {
  return /** @type{!Array<!proto.api.commons.DispositionPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.DispositionPair, 3));
};


/**
 * @param {!Array<!proto.api.commons.DispositionPair>} value
 * @return {!proto.api.commons.DispositionField} returns this
*/
proto.api.commons.DispositionField.prototype.setPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.commons.DispositionPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.DispositionPair}
 */
proto.api.commons.DispositionField.prototype.addPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.commons.DispositionPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.DispositionField} returns this
 */
proto.api.commons.DispositionField.prototype.clearPairsList = function() {
  return this.setPairsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DispositionPair.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DispositionPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DispositionPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DispositionPair}
 */
proto.api.commons.DispositionPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DispositionPair;
  return proto.api.commons.DispositionPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DispositionPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DispositionPair}
 */
proto.api.commons.DispositionPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DispositionPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DispositionPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DispositionPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DispositionPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.api.commons.DispositionPair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.DispositionPair} returns this
 */
proto.api.commons.DispositionPair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.api.commons.DispositionPair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.DispositionPair} returns this
 */
proto.api.commons.DispositionPair.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.Field}
 */
proto.api.commons.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.Field;
  return proto.api.commons.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.Field}
 */
proto.api.commons.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Field = 1;
 * @return {string}
 */
proto.api.commons.Field.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.Field} returns this
 */
proto.api.commons.Field.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Content = 2;
 * @return {string}
 */
proto.api.commons.Field.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.Field} returns this
 */
proto.api.commons.Field.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.ConsentCondition.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ConsentCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ConsentCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ConsentCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ConsentCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    consentConditionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    consentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    daysOfTheWeekList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    timeOfDayFrom: jspb.Message.getFieldWithDefault(msg, 11, ""),
    timeOfDayTo: jspb.Message.getFieldWithDefault(msg, 12, ""),
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ConsentCondition}
 */
proto.api.commons.ConsentCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ConsentCondition;
  return proto.api.commons.ConsentCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ConsentCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ConsentCondition}
 */
proto.api.commons.ConsentCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConsentConditionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConsentId(value);
      break;
    case 10:
      var values = /** @type {!Array<!proto.api.commons.Weekday.Enum>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDaysOfTheWeek(values[i]);
      }
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeOfDayFrom(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeOfDayTo(value);
      break;
    case 13:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ConsentCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ConsentCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ConsentCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ConsentCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsentConditionId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConsentId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDaysOfTheWeekList();
  if (f.length > 0) {
    writer.writePackedEnum(
      10,
      f
    );
  }
  f = message.getTimeOfDayFrom();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTimeOfDayTo();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 consent_condition_id = 1;
 * @return {number}
 */
proto.api.commons.ConsentCondition.prototype.getConsentConditionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.setConsentConditionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 consent_id = 2;
 * @return {number}
 */
proto.api.commons.ConsentCondition.prototype.getConsentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.setConsentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Weekday.Enum days_of_the_week = 10;
 * @return {!Array<!proto.api.commons.Weekday.Enum>}
 */
proto.api.commons.ConsentCondition.prototype.getDaysOfTheWeekList = function() {
  return /** @type {!Array<!proto.api.commons.Weekday.Enum>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<!proto.api.commons.Weekday.Enum>} value
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.setDaysOfTheWeekList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.api.commons.Weekday.Enum} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.addDaysOfTheWeek = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.clearDaysOfTheWeekList = function() {
  return this.setDaysOfTheWeekList([]);
};


/**
 * optional string time_of_day_from = 11;
 * @return {string}
 */
proto.api.commons.ConsentCondition.prototype.getTimeOfDayFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.setTimeOfDayFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string time_of_day_to = 12;
 * @return {string}
 */
proto.api.commons.ConsentCondition.prototype.getTimeOfDayTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.setTimeOfDayTo = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional google.protobuf.Timestamp from_date = 13;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.commons.ConsentCondition.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 13));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.commons.ConsentCondition} returns this
*/
proto.api.commons.ConsentCondition.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ConsentCondition.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 14;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.commons.ConsentCondition.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.commons.ConsentCondition} returns this
*/
proto.api.commons.ConsentCondition.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ConsentCondition} returns this
 */
proto.api.commons.ConsentCondition.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ConsentCondition.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.ScenarioData.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ScenarioData.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ScenarioData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ScenarioData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioData.toObject = function(includeInstance, msg) {
  var f, obj = {
    commType: (f = msg.getCommType()) && api_commons_communication_pb.CommType.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countryCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    callMetadataMap: (f = msg.getCallMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    timeOfCall: (f = msg.getTimeOfCall()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    frequencyCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    frequencyDuration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    dnclBlocks: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    country: jspb.Message.getFieldWithDefault(msg, 10, ""),
    state: jspb.Message.getFieldWithDefault(msg, 11, ""),
    county: jspb.Message.getFieldWithDefault(msg, 12, ""),
    city: jspb.Message.getFieldWithDefault(msg, 13, ""),
    province: jspb.Message.getFieldWithDefault(msg, 14, ""),
    phoneType: jspb.Message.getFieldWithDefault(msg, 15, 0),
    timeZone: jspb.Message.getFieldWithDefault(msg, 16, ""),
    holidaysList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    countryCodeData: (f = msg.getCountryCodeData()) && proto.api.commons.CountryCode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ScenarioData}
 */
proto.api.commons.ScenarioData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ScenarioData;
  return proto.api.commons.ScenarioData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ScenarioData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ScenarioData}
 */
proto.api.commons.ScenarioData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_commons_communication_pb.CommType;
      reader.readMessage(value,api_commons_communication_pb.CommType.deserializeBinaryFromReader);
      msg.setCommType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = msg.getCallMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeOfCall(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrequencyCount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrequencyDuration(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDnclBlocks(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounty(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvince(value);
      break;
    case 15:
      var value = /** @type {!proto.api.commons.PhoneType} */ (reader.readEnum());
      msg.setPhoneType(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeZone(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addHolidays(value);
      break;
    case 18:
      var value = new proto.api.commons.CountryCode;
      reader.readMessage(value,proto.api.commons.CountryCode.deserializeBinaryFromReader);
      msg.setCountryCodeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ScenarioData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ScenarioData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ScenarioData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_commons_communication_pb.CommType.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCallMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTimeOfCall();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFrequencyCount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getFrequencyDuration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getDnclBlocks();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCounty();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getProvince();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPhoneType();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getTimeZone();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getHolidaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getCountryCodeData();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.api.commons.CountryCode.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommType comm_type = 1;
 * @return {?proto.api.commons.CommType}
 */
proto.api.commons.ScenarioData.prototype.getCommType = function() {
  return /** @type{?proto.api.commons.CommType} */ (
    jspb.Message.getWrapperField(this, api_commons_communication_pb.CommType, 1));
};


/**
 * @param {?proto.api.commons.CommType|undefined} value
 * @return {!proto.api.commons.ScenarioData} returns this
*/
proto.api.commons.ScenarioData.prototype.setCommType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.clearCommType = function() {
  return this.setCommType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ScenarioData.prototype.hasCommType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phone_number = 2;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string country_code = 3;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> call_metadata = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.commons.ScenarioData.prototype.getCallMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.clearCallMetadataMap = function() {
  this.getCallMetadataMap().clear();
  return this;
};


/**
 * optional google.protobuf.Timestamp time_of_call = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.commons.ScenarioData.prototype.getTimeOfCall = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.commons.ScenarioData} returns this
*/
proto.api.commons.ScenarioData.prototype.setTimeOfCall = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.clearTimeOfCall = function() {
  return this.setTimeOfCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ScenarioData.prototype.hasTimeOfCall = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 frequency_count = 7;
 * @return {number}
 */
proto.api.commons.ScenarioData.prototype.getFrequencyCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setFrequencyCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 frequency_duration = 8;
 * @return {number}
 */
proto.api.commons.ScenarioData.prototype.getFrequencyDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setFrequencyDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool dncl_blocks = 9;
 * @return {boolean}
 */
proto.api.commons.ScenarioData.prototype.getDnclBlocks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setDnclBlocks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string country = 10;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string state = 11;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string county = 12;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getCounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setCounty = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string city = 13;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string province = 14;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getProvince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setProvince = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional PhoneType phone_type = 15;
 * @return {!proto.api.commons.PhoneType}
 */
proto.api.commons.ScenarioData.prototype.getPhoneType = function() {
  return /** @type {!proto.api.commons.PhoneType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.api.commons.PhoneType} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setPhoneType = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional string time_zone = 16;
 * @return {string}
 */
proto.api.commons.ScenarioData.prototype.getTimeZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * repeated string holidays = 17;
 * @return {!Array<string>}
 */
proto.api.commons.ScenarioData.prototype.getHolidaysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.setHolidaysList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.addHolidays = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.clearHolidaysList = function() {
  return this.setHolidaysList([]);
};


/**
 * optional CountryCode country_code_data = 18;
 * @return {?proto.api.commons.CountryCode}
 */
proto.api.commons.ScenarioData.prototype.getCountryCodeData = function() {
  return /** @type{?proto.api.commons.CountryCode} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.CountryCode, 18));
};


/**
 * @param {?proto.api.commons.CountryCode|undefined} value
 * @return {!proto.api.commons.ScenarioData} returns this
*/
proto.api.commons.ScenarioData.prototype.setCountryCodeData = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ScenarioData} returns this
 */
proto.api.commons.ScenarioData.prototype.clearCountryCodeData = function() {
  return this.setCountryCodeData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ScenarioData.prototype.hasCountryCodeData = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.CountryCode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.CountryCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.CountryCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.CountryCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    countryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countryId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.CountryCode}
 */
proto.api.commons.CountryCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.CountryCode;
  return proto.api.commons.CountryCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.CountryCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.CountryCode}
 */
proto.api.commons.CountryCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.CountryCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.CountryCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.CountryCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.CountryCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCountryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountryId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 country_code = 1;
 * @return {number}
 */
proto.api.commons.CountryCode.prototype.getCountryCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.CountryCode} returns this
 */
proto.api.commons.CountryCode.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string country_name = 2;
 * @return {string}
 */
proto.api.commons.CountryCode.prototype.getCountryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.CountryCode} returns this
 */
proto.api.commons.CountryCode.prototype.setCountryName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string country_id = 3;
 * @return {string}
 */
proto.api.commons.CountryCode.prototype.getCountryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.CountryCode} returns this
 */
proto.api.commons.CountryCode.prototype.setCountryId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.commons.ScenarioResult.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ScenarioResult.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ScenarioResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ScenarioResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    passedValue: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    shouldAllowResponsesList: jspb.Message.toObjectList(msg.getShouldAllowResponsesList(),
    proto.api.commons.ScenarioRuleResponse.toObject, includeInstance),
    shouldDenyResponsesList: jspb.Message.toObjectList(msg.getShouldDenyResponsesList(),
    proto.api.commons.ScenarioRuleResponse.toObject, includeInstance),
    scenarioName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ScenarioResult}
 */
proto.api.commons.ScenarioResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ScenarioResult;
  return proto.api.commons.ScenarioResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ScenarioResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ScenarioResult}
 */
proto.api.commons.ScenarioResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassedValue(value);
      break;
    case 2:
      var value = new proto.api.commons.ScenarioRuleResponse;
      reader.readMessage(value,proto.api.commons.ScenarioRuleResponse.deserializeBinaryFromReader);
      msg.addShouldAllowResponses(value);
      break;
    case 3:
      var value = new proto.api.commons.ScenarioRuleResponse;
      reader.readMessage(value,proto.api.commons.ScenarioRuleResponse.deserializeBinaryFromReader);
      msg.addShouldDenyResponses(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScenarioName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ScenarioResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ScenarioResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ScenarioResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassedValue();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getShouldAllowResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.api.commons.ScenarioRuleResponse.serializeBinaryToWriter
    );
  }
  f = message.getShouldDenyResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.commons.ScenarioRuleResponse.serializeBinaryToWriter
    );
  }
  f = message.getScenarioName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool passed_value = 5;
 * @return {boolean}
 */
proto.api.commons.ScenarioResult.prototype.getPassedValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.ScenarioResult} returns this
 */
proto.api.commons.ScenarioResult.prototype.setPassedValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated ScenarioRuleResponse should_allow_responses = 2;
 * @return {!Array<!proto.api.commons.ScenarioRuleResponse>}
 */
proto.api.commons.ScenarioResult.prototype.getShouldAllowResponsesList = function() {
  return /** @type{!Array<!proto.api.commons.ScenarioRuleResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.ScenarioRuleResponse, 2));
};


/**
 * @param {!Array<!proto.api.commons.ScenarioRuleResponse>} value
 * @return {!proto.api.commons.ScenarioResult} returns this
*/
proto.api.commons.ScenarioResult.prototype.setShouldAllowResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.api.commons.ScenarioRuleResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.ScenarioRuleResponse}
 */
proto.api.commons.ScenarioResult.prototype.addShouldAllowResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.api.commons.ScenarioRuleResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.ScenarioResult} returns this
 */
proto.api.commons.ScenarioResult.prototype.clearShouldAllowResponsesList = function() {
  return this.setShouldAllowResponsesList([]);
};


/**
 * repeated ScenarioRuleResponse should_deny_responses = 3;
 * @return {!Array<!proto.api.commons.ScenarioRuleResponse>}
 */
proto.api.commons.ScenarioResult.prototype.getShouldDenyResponsesList = function() {
  return /** @type{!Array<!proto.api.commons.ScenarioRuleResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.commons.ScenarioRuleResponse, 3));
};


/**
 * @param {!Array<!proto.api.commons.ScenarioRuleResponse>} value
 * @return {!proto.api.commons.ScenarioResult} returns this
*/
proto.api.commons.ScenarioResult.prototype.setShouldDenyResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.commons.ScenarioRuleResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.commons.ScenarioRuleResponse}
 */
proto.api.commons.ScenarioResult.prototype.addShouldDenyResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.commons.ScenarioRuleResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.commons.ScenarioResult} returns this
 */
proto.api.commons.ScenarioResult.prototype.clearShouldDenyResponsesList = function() {
  return this.setShouldDenyResponsesList([]);
};


/**
 * optional string scenario_name = 4;
 * @return {string}
 */
proto.api.commons.ScenarioResult.prototype.getScenarioName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioResult} returns this
 */
proto.api.commons.ScenarioResult.prototype.setScenarioName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ScenarioRuleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ScenarioRuleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ScenarioRuleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioRuleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permitValue: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ScenarioRuleResponse}
 */
proto.api.commons.ScenarioRuleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ScenarioRuleResponse;
  return proto.api.commons.ScenarioRuleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ScenarioRuleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ScenarioRuleResponse}
 */
proto.api.commons.ScenarioRuleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleText(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPermitValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ScenarioRuleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ScenarioRuleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ScenarioRuleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScenarioRuleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuleText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermitValue();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string rule_text = 1;
 * @return {string}
 */
proto.api.commons.ScenarioRuleResponse.prototype.getRuleText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScenarioRuleResponse} returns this
 */
proto.api.commons.ScenarioRuleResponse.prototype.setRuleText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool permit_value = 3;
 * @return {boolean}
 */
proto.api.commons.ScenarioRuleResponse.prototype.getPermitValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.ScenarioRuleResponse} returns this
 */
proto.api.commons.ScenarioRuleResponse.prototype.setPermitValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ScrubEntryDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ScrubEntryDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ScrubEntryDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScrubEntryDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirationDate: (f = msg.getExpirationDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    notes: (f = msg.getNotes()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ScrubEntryDetails}
 */
proto.api.commons.ScrubEntryDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ScrubEntryDetails;
  return proto.api.commons.ScrubEntryDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ScrubEntryDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ScrubEntryDetails}
 */
proto.api.commons.ScrubEntryDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationDate(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setNotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ScrubEntryDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ScrubEntryDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ScrubEntryDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ScrubEntryDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirationDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNotes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.api.commons.ScrubEntryDetails.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.ScrubEntryDetails} returns this
 */
proto.api.commons.ScrubEntryDetails.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp expiration_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.commons.ScrubEntryDetails.prototype.getExpirationDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.api.commons.ScrubEntryDetails} returns this
*/
proto.api.commons.ScrubEntryDetails.prototype.setExpirationDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ScrubEntryDetails} returns this
 */
proto.api.commons.ScrubEntryDetails.prototype.clearExpirationDate = function() {
  return this.setExpirationDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ScrubEntryDetails.prototype.hasExpirationDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.StringValue notes = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.api.commons.ScrubEntryDetails.prototype.getNotes = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 3));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.api.commons.ScrubEntryDetails} returns this
*/
proto.api.commons.ScrubEntryDetails.prototype.setNotes = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ScrubEntryDetails} returns this
 */
proto.api.commons.ScrubEntryDetails.prototype.clearNotes = function() {
  return this.setNotes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ScrubEntryDetails.prototype.hasNotes = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.RuleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.RuleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.RuleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.RuleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permit: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pluginResponse: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.RuleResponse}
 */
proto.api.commons.RuleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.RuleResponse;
  return proto.api.commons.RuleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.RuleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.RuleResponse}
 */
proto.api.commons.RuleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleText(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPermit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.RuleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.RuleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.RuleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.RuleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuleText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPluginResponse();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string rule_text = 1;
 * @return {string}
 */
proto.api.commons.RuleResponse.prototype.getRuleText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.RuleResponse} returns this
 */
proto.api.commons.RuleResponse.prototype.setRuleText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool permit = 2;
 * @return {boolean}
 */
proto.api.commons.RuleResponse.prototype.getPermit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.RuleResponse} returns this
 */
proto.api.commons.RuleResponse.prototype.setPermit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string plugin_response = 3;
 * @return {string}
 */
proto.api.commons.RuleResponse.prototype.getPluginResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.commons.RuleResponse} returns this
 */
proto.api.commons.RuleResponse.prototype.setPluginResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.api.commons.Verb = {
  V_UNKNOWN: 0,
  V_ALLOW: 1,
  V_DENY: 2,
  V_SCRUB: 3,
  V_OVERRIDE: 4
};

/**
 * @enum {number}
 */
proto.api.commons.Entity = {
  E_UNKNOWN: 0,
  E_CALL: 1,
  E_EMAIL: 2,
  E_SMS: 3
};

/**
 * @enum {number}
 */
proto.api.commons.SubEntity = {
  SE_ALL: 0,
  SE_INBOUND: 1,
  SE_OUTBOUND: 2,
  SE_MANUAL: 3,
  SE_PREVIEW: 4,
  SE_MAC: 5,
  SE_BROADCAST: 6
};

/**
 * @enum {number}
 */
proto.api.commons.PhoneType = {
  CELL: 0,
  LAND: 1,
  TOLL_FREE: 2
};

/**
 * @enum {number}
 */
proto.api.commons.ContentType = {
  CT_PHONE_NUMBER: 0,
  CT_EMAIL: 1,
  CT_SMS: 2,
  CT_OTHER: 3,
  CT_ACCOUNT_NUMBER: 4
};

/**
 * @enum {number}
 */
proto.api.commons.Channel = {
  CHANNEL_CALL: 0,
  CHANNEL_EMAIL: 1,
  CHANNEL_SMS: 2
};

/**
 * @enum {number}
 */
proto.api.commons.PluginType = {
  UNKNOWN_PLUGIN: 0,
  GRYPHON: 1,
  TCN_CONSENT: 2,
  RND: 3
};

/**
 * @enum {number}
 */
proto.api.commons.Environment = {
  INVALID_ENV: 0,
  TEST: 1,
  PRODUCTION: 2
};

/**
 * @enum {number}
 */
proto.api.commons.ConsentAbsentAction = {
  CONSENT_ABSENT_ACTION_ALLOW: 0,
  CONSENT_ABSENT_ACTION_DENY: 1
};

goog.object.extend(exports, proto.api.commons);
