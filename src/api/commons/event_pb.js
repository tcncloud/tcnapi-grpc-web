// source: api/commons/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var api_commons_asm_pb = require('../../api/commons/asm_pb.js');
goog.object.extend(proto, api_commons_asm_pb);
var api_commons_omnichannel_pb = require('../../api/commons/omnichannel_pb.js');
goog.object.extend(proto, api_commons_omnichannel_pb);
goog.exportSymbol('proto.api.commons.ActivatedConversationAsmEvent', null, global);
goog.exportSymbol('proto.api.commons.ActivatedConversationEvent', null, global);
goog.exportSymbol('proto.api.commons.AsmEvent', null, global);
goog.exportSymbol('proto.api.commons.AsmEvent.EventCase', null, global);
goog.exportSymbol('proto.api.commons.DeactivatedConversationAsmEvent', null, global);
goog.exportSymbol('proto.api.commons.DeactivatedConversationEvent', null, global);
goog.exportSymbol('proto.api.commons.Event', null, global);
goog.exportSymbol('proto.api.commons.Event.EventCase', null, global);
goog.exportSymbol('proto.api.commons.PauseEvent', null, global);
goog.exportSymbol('proto.api.commons.ResumeEvent', null, global);
goog.exportSymbol('proto.api.commons.SendStatusAsmEvent', null, global);
goog.exportSymbol('proto.api.commons.SendStatusEvent', null, global);
goog.exportSymbol('proto.api.commons.SentMessageAsmEvent', null, global);
goog.exportSymbol('proto.api.commons.SentMessageEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.commons.Event.oneofGroups_);
};
goog.inherits(proto.api.commons.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.Event.displayName = 'proto.api.commons.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ActivatedConversationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.ActivatedConversationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ActivatedConversationEvent.displayName = 'proto.api.commons.ActivatedConversationEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DeactivatedConversationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.DeactivatedConversationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DeactivatedConversationEvent.displayName = 'proto.api.commons.DeactivatedConversationEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.SentMessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.SentMessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.SentMessageEvent.displayName = 'proto.api.commons.SentMessageEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.SendStatusEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.SendStatusEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.SendStatusEvent.displayName = 'proto.api.commons.SendStatusEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.AsmEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.commons.AsmEvent.oneofGroups_);
};
goog.inherits(proto.api.commons.AsmEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.AsmEvent.displayName = 'proto.api.commons.AsmEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ActivatedConversationAsmEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.ActivatedConversationAsmEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ActivatedConversationAsmEvent.displayName = 'proto.api.commons.ActivatedConversationAsmEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.DeactivatedConversationAsmEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.DeactivatedConversationAsmEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.DeactivatedConversationAsmEvent.displayName = 'proto.api.commons.DeactivatedConversationAsmEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.SentMessageAsmEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.SentMessageAsmEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.SentMessageAsmEvent.displayName = 'proto.api.commons.SentMessageAsmEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.SendStatusAsmEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.SendStatusAsmEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.SendStatusAsmEvent.displayName = 'proto.api.commons.SendStatusAsmEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.PauseEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.PauseEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.PauseEvent.displayName = 'proto.api.commons.PauseEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.commons.ResumeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.commons.ResumeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.commons.ResumeEvent.displayName = 'proto.api.commons.ResumeEvent';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.commons.Event.oneofGroups_ = [[5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.api.commons.Event.EventCase = {
  EVENT_NOT_SET: 0,
  ACTIVATED_CONVERSATION_EVENT: 5,
  DEACTIVATED_CONVERSATION_EVENT: 6,
  SENT_MESSAGE_EVENT: 7,
  SEND_STATUS_EVENT: 8,
  PAUSE_EVENT: 9,
  RESUME_EVENT: 10
};

/**
 * @return {proto.api.commons.Event.EventCase}
 */
proto.api.commons.Event.prototype.getEventCase = function() {
  return /** @type {proto.api.commons.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.api.commons.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    activatedConversationEvent: (f = msg.getActivatedConversationEvent()) && proto.api.commons.ActivatedConversationEvent.toObject(includeInstance, f),
    deactivatedConversationEvent: (f = msg.getDeactivatedConversationEvent()) && proto.api.commons.DeactivatedConversationEvent.toObject(includeInstance, f),
    sentMessageEvent: (f = msg.getSentMessageEvent()) && proto.api.commons.SentMessageEvent.toObject(includeInstance, f),
    sendStatusEvent: (f = msg.getSendStatusEvent()) && proto.api.commons.SendStatusEvent.toObject(includeInstance, f),
    pauseEvent: (f = msg.getPauseEvent()) && proto.api.commons.PauseEvent.toObject(includeInstance, f),
    resumeEvent: (f = msg.getResumeEvent()) && proto.api.commons.ResumeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.Event}
 */
proto.api.commons.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.Event;
  return proto.api.commons.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.Event}
 */
proto.api.commons.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.StatusState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventTime(value);
      break;
    case 5:
      var value = new proto.api.commons.ActivatedConversationEvent;
      reader.readMessage(value,proto.api.commons.ActivatedConversationEvent.deserializeBinaryFromReader);
      msg.setActivatedConversationEvent(value);
      break;
    case 6:
      var value = new proto.api.commons.DeactivatedConversationEvent;
      reader.readMessage(value,proto.api.commons.DeactivatedConversationEvent.deserializeBinaryFromReader);
      msg.setDeactivatedConversationEvent(value);
      break;
    case 7:
      var value = new proto.api.commons.SentMessageEvent;
      reader.readMessage(value,proto.api.commons.SentMessageEvent.deserializeBinaryFromReader);
      msg.setSentMessageEvent(value);
      break;
    case 8:
      var value = new proto.api.commons.SendStatusEvent;
      reader.readMessage(value,proto.api.commons.SendStatusEvent.deserializeBinaryFromReader);
      msg.setSendStatusEvent(value);
      break;
    case 9:
      var value = new proto.api.commons.PauseEvent;
      reader.readMessage(value,proto.api.commons.PauseEvent.deserializeBinaryFromReader);
      msg.setPauseEvent(value);
      break;
    case 10:
      var value = new proto.api.commons.ResumeEvent;
      reader.readMessage(value,proto.api.commons.ResumeEvent.deserializeBinaryFromReader);
      msg.setResumeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEventTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActivatedConversationEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.commons.ActivatedConversationEvent.serializeBinaryToWriter
    );
  }
  f = message.getDeactivatedConversationEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.commons.DeactivatedConversationEvent.serializeBinaryToWriter
    );
  }
  f = message.getSentMessageEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.commons.SentMessageEvent.serializeBinaryToWriter
    );
  }
  f = message.getSendStatusEvent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.commons.SendStatusEvent.serializeBinaryToWriter
    );
  }
  f = message.getPauseEvent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.api.commons.PauseEvent.serializeBinaryToWriter
    );
  }
  f = message.getResumeEvent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.api.commons.ResumeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusState state = 1;
 * @return {!proto.api.commons.StatusState}
 */
proto.api.commons.Event.prototype.getState = function() {
  return /** @type {!proto.api.commons.StatusState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.StatusState} value
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 event_time = 2;
 * @return {number}
 */
proto.api.commons.Event.prototype.getEventTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.setEventTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ActivatedConversationEvent activated_conversation_event = 5;
 * @return {?proto.api.commons.ActivatedConversationEvent}
 */
proto.api.commons.Event.prototype.getActivatedConversationEvent = function() {
  return /** @type{?proto.api.commons.ActivatedConversationEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.ActivatedConversationEvent, 5));
};


/**
 * @param {?proto.api.commons.ActivatedConversationEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setActivatedConversationEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearActivatedConversationEvent = function() {
  return this.setActivatedConversationEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasActivatedConversationEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DeactivatedConversationEvent deactivated_conversation_event = 6;
 * @return {?proto.api.commons.DeactivatedConversationEvent}
 */
proto.api.commons.Event.prototype.getDeactivatedConversationEvent = function() {
  return /** @type{?proto.api.commons.DeactivatedConversationEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.DeactivatedConversationEvent, 6));
};


/**
 * @param {?proto.api.commons.DeactivatedConversationEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setDeactivatedConversationEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearDeactivatedConversationEvent = function() {
  return this.setDeactivatedConversationEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasDeactivatedConversationEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SentMessageEvent sent_message_event = 7;
 * @return {?proto.api.commons.SentMessageEvent}
 */
proto.api.commons.Event.prototype.getSentMessageEvent = function() {
  return /** @type{?proto.api.commons.SentMessageEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.SentMessageEvent, 7));
};


/**
 * @param {?proto.api.commons.SentMessageEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setSentMessageEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearSentMessageEvent = function() {
  return this.setSentMessageEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasSentMessageEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SendStatusEvent send_status_event = 8;
 * @return {?proto.api.commons.SendStatusEvent}
 */
proto.api.commons.Event.prototype.getSendStatusEvent = function() {
  return /** @type{?proto.api.commons.SendStatusEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.SendStatusEvent, 8));
};


/**
 * @param {?proto.api.commons.SendStatusEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setSendStatusEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearSendStatusEvent = function() {
  return this.setSendStatusEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasSendStatusEvent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PauseEvent pause_event = 9;
 * @return {?proto.api.commons.PauseEvent}
 */
proto.api.commons.Event.prototype.getPauseEvent = function() {
  return /** @type{?proto.api.commons.PauseEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.PauseEvent, 9));
};


/**
 * @param {?proto.api.commons.PauseEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setPauseEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearPauseEvent = function() {
  return this.setPauseEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasPauseEvent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResumeEvent resume_event = 10;
 * @return {?proto.api.commons.ResumeEvent}
 */
proto.api.commons.Event.prototype.getResumeEvent = function() {
  return /** @type{?proto.api.commons.ResumeEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.ResumeEvent, 10));
};


/**
 * @param {?proto.api.commons.ResumeEvent|undefined} value
 * @return {!proto.api.commons.Event} returns this
*/
proto.api.commons.Event.prototype.setResumeEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.api.commons.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.Event} returns this
 */
proto.api.commons.Event.prototype.clearResumeEvent = function() {
  return this.setResumeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.Event.prototype.hasResumeEvent = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ActivatedConversationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ActivatedConversationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ActivatedConversationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ActivatedConversationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ActivatedConversationEvent}
 */
proto.api.commons.ActivatedConversationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ActivatedConversationEvent;
  return proto.api.commons.ActivatedConversationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ActivatedConversationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ActivatedConversationEvent}
 */
proto.api.commons.ActivatedConversationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ActivatedConversationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ActivatedConversationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ActivatedConversationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ActivatedConversationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional OmniConversation conversation = 1;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.ActivatedConversationEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 1));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.ActivatedConversationEvent} returns this
*/
proto.api.commons.ActivatedConversationEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ActivatedConversationEvent} returns this
 */
proto.api.commons.ActivatedConversationEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ActivatedConversationEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DeactivatedConversationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DeactivatedConversationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DeactivatedConversationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DeactivatedConversationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DeactivatedConversationEvent}
 */
proto.api.commons.DeactivatedConversationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DeactivatedConversationEvent;
  return proto.api.commons.DeactivatedConversationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DeactivatedConversationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DeactivatedConversationEvent}
 */
proto.api.commons.DeactivatedConversationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DeactivatedConversationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DeactivatedConversationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DeactivatedConversationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DeactivatedConversationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional OmniConversation conversation = 1;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.DeactivatedConversationEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 1));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.DeactivatedConversationEvent} returns this
*/
proto.api.commons.DeactivatedConversationEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.DeactivatedConversationEvent} returns this
 */
proto.api.commons.DeactivatedConversationEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.DeactivatedConversationEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.SentMessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.SentMessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.SentMessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SentMessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseTimeSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isInitialAgentMessage: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.SentMessageEvent}
 */
proto.api.commons.SentMessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.SentMessageEvent;
  return proto.api.commons.SentMessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.SentMessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.SentMessageEvent}
 */
proto.api.commons.SentMessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResponseTimeSeconds(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInitialAgentMessage(value);
      break;
    case 3:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.SentMessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.SentMessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.SentMessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SentMessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseTimeSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsInitialAgentMessage();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 response_time_seconds = 1;
 * @return {number}
 */
proto.api.commons.SentMessageEvent.prototype.getResponseTimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.SentMessageEvent} returns this
 */
proto.api.commons.SentMessageEvent.prototype.setResponseTimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_initial_agent_message = 2;
 * @return {boolean}
 */
proto.api.commons.SentMessageEvent.prototype.getIsInitialAgentMessage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.SentMessageEvent} returns this
 */
proto.api.commons.SentMessageEvent.prototype.setIsInitialAgentMessage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional OmniConversation conversation = 3;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.SentMessageEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 3));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.SentMessageEvent} returns this
*/
proto.api.commons.SentMessageEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.SentMessageEvent} returns this
 */
proto.api.commons.SentMessageEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.SentMessageEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.SendStatusEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.SendStatusEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.SendStatusEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SendStatusEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.SendStatusEvent}
 */
proto.api.commons.SendStatusEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.SendStatusEvent;
  return proto.api.commons.SendStatusEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.SendStatusEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.SendStatusEvent}
 */
proto.api.commons.SendStatusEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.StatusState} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.SendStatusEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.SendStatusEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.SendStatusEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SendStatusEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusState status = 1;
 * @return {!proto.api.commons.StatusState}
 */
proto.api.commons.SendStatusEvent.prototype.getStatus = function() {
  return /** @type {!proto.api.commons.StatusState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.StatusState} value
 * @return {!proto.api.commons.SendStatusEvent} returns this
 */
proto.api.commons.SendStatusEvent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.commons.AsmEvent.oneofGroups_ = [[5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.api.commons.AsmEvent.EventCase = {
  EVENT_NOT_SET: 0,
  ACTIVATED_CONVERSATION_ASM_EVENT: 5,
  DEACTIVATED_CONVERSATION_ASM_EVENT: 6,
  SENT_MESSAGE_ASM_EVENT: 7,
  SEND_STATUS_ASM_EVENT: 8,
  PAUSE_EVENT: 9,
  RESUME_EVENT: 10
};

/**
 * @return {proto.api.commons.AsmEvent.EventCase}
 */
proto.api.commons.AsmEvent.prototype.getEventCase = function() {
  return /** @type {proto.api.commons.AsmEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.api.commons.AsmEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.AsmEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.AsmEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.AsmEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.AsmEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    activatedConversationAsmEvent: (f = msg.getActivatedConversationAsmEvent()) && proto.api.commons.ActivatedConversationAsmEvent.toObject(includeInstance, f),
    deactivatedConversationAsmEvent: (f = msg.getDeactivatedConversationAsmEvent()) && proto.api.commons.DeactivatedConversationAsmEvent.toObject(includeInstance, f),
    sentMessageAsmEvent: (f = msg.getSentMessageAsmEvent()) && proto.api.commons.SentMessageAsmEvent.toObject(includeInstance, f),
    sendStatusAsmEvent: (f = msg.getSendStatusAsmEvent()) && proto.api.commons.SendStatusAsmEvent.toObject(includeInstance, f),
    pauseEvent: (f = msg.getPauseEvent()) && proto.api.commons.PauseEvent.toObject(includeInstance, f),
    resumeEvent: (f = msg.getResumeEvent()) && proto.api.commons.ResumeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.AsmEvent}
 */
proto.api.commons.AsmEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.AsmEvent;
  return proto.api.commons.AsmEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.AsmEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.AsmEvent}
 */
proto.api.commons.AsmEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.commons.StatusState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEventTime(value);
      break;
    case 5:
      var value = new proto.api.commons.ActivatedConversationAsmEvent;
      reader.readMessage(value,proto.api.commons.ActivatedConversationAsmEvent.deserializeBinaryFromReader);
      msg.setActivatedConversationAsmEvent(value);
      break;
    case 6:
      var value = new proto.api.commons.DeactivatedConversationAsmEvent;
      reader.readMessage(value,proto.api.commons.DeactivatedConversationAsmEvent.deserializeBinaryFromReader);
      msg.setDeactivatedConversationAsmEvent(value);
      break;
    case 7:
      var value = new proto.api.commons.SentMessageAsmEvent;
      reader.readMessage(value,proto.api.commons.SentMessageAsmEvent.deserializeBinaryFromReader);
      msg.setSentMessageAsmEvent(value);
      break;
    case 8:
      var value = new proto.api.commons.SendStatusAsmEvent;
      reader.readMessage(value,proto.api.commons.SendStatusAsmEvent.deserializeBinaryFromReader);
      msg.setSendStatusAsmEvent(value);
      break;
    case 9:
      var value = new proto.api.commons.PauseEvent;
      reader.readMessage(value,proto.api.commons.PauseEvent.deserializeBinaryFromReader);
      msg.setPauseEvent(value);
      break;
    case 10:
      var value = new proto.api.commons.ResumeEvent;
      reader.readMessage(value,proto.api.commons.ResumeEvent.deserializeBinaryFromReader);
      msg.setResumeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.AsmEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.AsmEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.AsmEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.AsmEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEventTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActivatedConversationAsmEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.commons.ActivatedConversationAsmEvent.serializeBinaryToWriter
    );
  }
  f = message.getDeactivatedConversationAsmEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.commons.DeactivatedConversationAsmEvent.serializeBinaryToWriter
    );
  }
  f = message.getSentMessageAsmEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.commons.SentMessageAsmEvent.serializeBinaryToWriter
    );
  }
  f = message.getSendStatusAsmEvent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.api.commons.SendStatusAsmEvent.serializeBinaryToWriter
    );
  }
  f = message.getPauseEvent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.api.commons.PauseEvent.serializeBinaryToWriter
    );
  }
  f = message.getResumeEvent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.api.commons.ResumeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusState state = 1;
 * @return {!proto.api.commons.StatusState}
 */
proto.api.commons.AsmEvent.prototype.getState = function() {
  return /** @type {!proto.api.commons.StatusState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.commons.StatusState} value
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 event_time = 2;
 * @return {number}
 */
proto.api.commons.AsmEvent.prototype.getEventTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.setEventTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ActivatedConversationAsmEvent activated_conversation_asm_event = 5;
 * @return {?proto.api.commons.ActivatedConversationAsmEvent}
 */
proto.api.commons.AsmEvent.prototype.getActivatedConversationAsmEvent = function() {
  return /** @type{?proto.api.commons.ActivatedConversationAsmEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.ActivatedConversationAsmEvent, 5));
};


/**
 * @param {?proto.api.commons.ActivatedConversationAsmEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setActivatedConversationAsmEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearActivatedConversationAsmEvent = function() {
  return this.setActivatedConversationAsmEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasActivatedConversationAsmEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DeactivatedConversationAsmEvent deactivated_conversation_asm_event = 6;
 * @return {?proto.api.commons.DeactivatedConversationAsmEvent}
 */
proto.api.commons.AsmEvent.prototype.getDeactivatedConversationAsmEvent = function() {
  return /** @type{?proto.api.commons.DeactivatedConversationAsmEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.DeactivatedConversationAsmEvent, 6));
};


/**
 * @param {?proto.api.commons.DeactivatedConversationAsmEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setDeactivatedConversationAsmEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearDeactivatedConversationAsmEvent = function() {
  return this.setDeactivatedConversationAsmEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasDeactivatedConversationAsmEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SentMessageAsmEvent sent_message_asm_event = 7;
 * @return {?proto.api.commons.SentMessageAsmEvent}
 */
proto.api.commons.AsmEvent.prototype.getSentMessageAsmEvent = function() {
  return /** @type{?proto.api.commons.SentMessageAsmEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.SentMessageAsmEvent, 7));
};


/**
 * @param {?proto.api.commons.SentMessageAsmEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setSentMessageAsmEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearSentMessageAsmEvent = function() {
  return this.setSentMessageAsmEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasSentMessageAsmEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SendStatusAsmEvent send_status_asm_event = 8;
 * @return {?proto.api.commons.SendStatusAsmEvent}
 */
proto.api.commons.AsmEvent.prototype.getSendStatusAsmEvent = function() {
  return /** @type{?proto.api.commons.SendStatusAsmEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.SendStatusAsmEvent, 8));
};


/**
 * @param {?proto.api.commons.SendStatusAsmEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setSendStatusAsmEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearSendStatusAsmEvent = function() {
  return this.setSendStatusAsmEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasSendStatusAsmEvent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PauseEvent pause_event = 9;
 * @return {?proto.api.commons.PauseEvent}
 */
proto.api.commons.AsmEvent.prototype.getPauseEvent = function() {
  return /** @type{?proto.api.commons.PauseEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.PauseEvent, 9));
};


/**
 * @param {?proto.api.commons.PauseEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setPauseEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearPauseEvent = function() {
  return this.setPauseEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasPauseEvent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResumeEvent resume_event = 10;
 * @return {?proto.api.commons.ResumeEvent}
 */
proto.api.commons.AsmEvent.prototype.getResumeEvent = function() {
  return /** @type{?proto.api.commons.ResumeEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.commons.ResumeEvent, 10));
};


/**
 * @param {?proto.api.commons.ResumeEvent|undefined} value
 * @return {!proto.api.commons.AsmEvent} returns this
*/
proto.api.commons.AsmEvent.prototype.setResumeEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.api.commons.AsmEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.AsmEvent} returns this
 */
proto.api.commons.AsmEvent.prototype.clearResumeEvent = function() {
  return this.setResumeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.AsmEvent.prototype.hasResumeEvent = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ActivatedConversationAsmEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ActivatedConversationAsmEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ActivatedConversationAsmEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ActivatedConversationAsmEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ActivatedConversationAsmEvent}
 */
proto.api.commons.ActivatedConversationAsmEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ActivatedConversationAsmEvent;
  return proto.api.commons.ActivatedConversationAsmEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ActivatedConversationAsmEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ActivatedConversationAsmEvent}
 */
proto.api.commons.ActivatedConversationAsmEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ActivatedConversationAsmEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ActivatedConversationAsmEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ActivatedConversationAsmEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ActivatedConversationAsmEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional OmniConversation conversation = 1;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.ActivatedConversationAsmEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 1));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.ActivatedConversationAsmEvent} returns this
*/
proto.api.commons.ActivatedConversationAsmEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.ActivatedConversationAsmEvent} returns this
 */
proto.api.commons.ActivatedConversationAsmEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.ActivatedConversationAsmEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.DeactivatedConversationAsmEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.DeactivatedConversationAsmEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.DeactivatedConversationAsmEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DeactivatedConversationAsmEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.DeactivatedConversationAsmEvent}
 */
proto.api.commons.DeactivatedConversationAsmEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.DeactivatedConversationAsmEvent;
  return proto.api.commons.DeactivatedConversationAsmEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.DeactivatedConversationAsmEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.DeactivatedConversationAsmEvent}
 */
proto.api.commons.DeactivatedConversationAsmEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.DeactivatedConversationAsmEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.DeactivatedConversationAsmEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.DeactivatedConversationAsmEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.DeactivatedConversationAsmEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional OmniConversation conversation = 1;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.DeactivatedConversationAsmEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 1));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.DeactivatedConversationAsmEvent} returns this
*/
proto.api.commons.DeactivatedConversationAsmEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.DeactivatedConversationAsmEvent} returns this
 */
proto.api.commons.DeactivatedConversationAsmEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.DeactivatedConversationAsmEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.SentMessageAsmEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.SentMessageAsmEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.SentMessageAsmEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SentMessageAsmEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseTimeSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isInitialAgentMessage: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    conversation: (f = msg.getConversation()) && api_commons_omnichannel_pb.OmniConversation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.SentMessageAsmEvent}
 */
proto.api.commons.SentMessageAsmEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.SentMessageAsmEvent;
  return proto.api.commons.SentMessageAsmEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.SentMessageAsmEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.SentMessageAsmEvent}
 */
proto.api.commons.SentMessageAsmEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResponseTimeSeconds(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInitialAgentMessage(value);
      break;
    case 3:
      var value = new api_commons_omnichannel_pb.OmniConversation;
      reader.readMessage(value,api_commons_omnichannel_pb.OmniConversation.deserializeBinaryFromReader);
      msg.setConversation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.SentMessageAsmEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.SentMessageAsmEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.SentMessageAsmEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SentMessageAsmEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseTimeSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsInitialAgentMessage();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getConversation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      api_commons_omnichannel_pb.OmniConversation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 response_time_seconds = 1;
 * @return {number}
 */
proto.api.commons.SentMessageAsmEvent.prototype.getResponseTimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.commons.SentMessageAsmEvent} returns this
 */
proto.api.commons.SentMessageAsmEvent.prototype.setResponseTimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_initial_agent_message = 2;
 * @return {boolean}
 */
proto.api.commons.SentMessageAsmEvent.prototype.getIsInitialAgentMessage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.commons.SentMessageAsmEvent} returns this
 */
proto.api.commons.SentMessageAsmEvent.prototype.setIsInitialAgentMessage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional OmniConversation conversation = 3;
 * @return {?proto.api.commons.OmniConversation}
 */
proto.api.commons.SentMessageAsmEvent.prototype.getConversation = function() {
  return /** @type{?proto.api.commons.OmniConversation} */ (
    jspb.Message.getWrapperField(this, api_commons_omnichannel_pb.OmniConversation, 3));
};


/**
 * @param {?proto.api.commons.OmniConversation|undefined} value
 * @return {!proto.api.commons.SentMessageAsmEvent} returns this
*/
proto.api.commons.SentMessageAsmEvent.prototype.setConversation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.commons.SentMessageAsmEvent} returns this
 */
proto.api.commons.SentMessageAsmEvent.prototype.clearConversation = function() {
  return this.setConversation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.commons.SentMessageAsmEvent.prototype.hasConversation = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.SendStatusAsmEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.SendStatusAsmEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.SendStatusAsmEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SendStatusAsmEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.SendStatusAsmEvent}
 */
proto.api.commons.SendStatusAsmEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.SendStatusAsmEvent;
  return proto.api.commons.SendStatusAsmEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.SendStatusAsmEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.SendStatusAsmEvent}
 */
proto.api.commons.SendStatusAsmEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.SendStatusAsmEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.SendStatusAsmEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.SendStatusAsmEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.SendStatusAsmEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.PauseEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.PauseEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.PauseEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PauseEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.PauseEvent}
 */
proto.api.commons.PauseEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.PauseEvent;
  return proto.api.commons.PauseEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.PauseEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.PauseEvent}
 */
proto.api.commons.PauseEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.PauseEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.PauseEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.PauseEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.PauseEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.commons.ResumeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.commons.ResumeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.commons.ResumeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ResumeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.commons.ResumeEvent}
 */
proto.api.commons.ResumeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.commons.ResumeEvent;
  return proto.api.commons.ResumeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.commons.ResumeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.commons.ResumeEvent}
 */
proto.api.commons.ResumeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.commons.ResumeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.commons.ResumeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.commons.ResumeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.commons.ResumeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.api.commons);
